#include "packetmanager.h"
#include "serverinstance.h"
#include "channelmanager.h"

#include "packet/packethelper_fulluserinfo.h"
#include "packet/packet_metadata_data.h"
#include "user/userfastbuy.h"
#include "user/userinventoryitem.h"

#include "common/net/netdefs.h"
#include "common/utils.h"

#include "zip.h"

using namespace std;

CPacketManager g_PacketManager;

CPacketManager::CPacketManager() : CBaseManager("PacketManager")
{
	m_pMapListZip = NULL;
	m_pClientTableZip = NULL;
	m_pWeaponPartsZip = NULL;
	m_pMileageShopZip = NULL;
	m_pMatchingZip = NULL;
	m_pProgressUnlockZip = NULL;
	m_pGameModeListZip = NULL;
	m_pReinforceMaxLvlZip = NULL;
	m_pReinforceMaxExpZip = NULL;
	m_pItemExpireTimeZip = NULL;
	m_pHonorMoneyShopZip = NULL;
	m_pScenarioTX_CommonZip = NULL;
	m_pScenarioTX_DediZip = NULL;
	m_pShopItemList_DediZip = NULL;
	m_pZBCompetitiveZip = NULL;
	m_pPPSystemZip = NULL;
	m_pItemZip = NULL;
	m_pCodisDataZip = NULL;
	m_pWeaponPropZip = NULL;
	m_pModeEventZip = NULL;
	m_pEventShopZip = NULL;
	m_pFamilyTotalWarMapZip = NULL;
	m_pFamilyTotalWarZip = NULL;
	m_pReinforceItemsExp = NULL;
	m_pUnk3 = NULL;
	m_pUnk8 = NULL;
	m_pUnk20 = NULL;
	m_pUnk31 = NULL;
	m_pUnk43 = NULL;
	m_pUnk49 = NULL;
	m_pUnk54 = NULL;
	m_pUnk55 = NULL;
}

CPacketManager::~CPacketManager()
{
}

bool CPacketManager::Init()
{
	m_pMapListZip = LoadBinaryMetadata("MapList.csv", true);
	m_pClientTableZip = LoadBinaryMetadata("ClientTable.csv", true);
	m_pWeaponPartsZip = LoadBinaryMetadata("weaponparts.csv", true);
	m_pMileageShopZip = LoadBinaryMetadata("MileageShop.csv", true);
	m_pMatchingZip = LoadBinaryMetadata("MatchOption.csv", true);
	m_pProgressUnlockZip = LoadBinaryMetadata("progress_unlock.csv", true);
	m_pGameModeListZip = LoadBinaryMetadata("GameModeList.csv", true);
	m_pReinforceMaxLvlZip = LoadBinaryMetadata("ReinforceMaxLv.csv", true);
	m_pReinforceMaxExpZip = LoadBinaryMetadata("ReinforceMaxEXP.csv", true);
	m_pItemExpireTimeZip = LoadBinaryMetadata("ItemExpireTime.csv", true);
	m_pHonorMoneyShopZip = LoadBinaryMetadata("HonorMoneyShop.csv", true);
	m_pScenarioTX_CommonZip = LoadBinaryMetadata("scenariotx_common.json", true);
	m_pScenarioTX_DediZip = LoadBinaryMetadata("scenariotx_dedi.json", true);
	m_pShopItemList_DediZip = LoadBinaryMetadata("shopitemlist_dedi.json", true);
	m_pZBCompetitiveZip = LoadBinaryMetadata("ZBCompetitive.json", true);
	m_pPPSystemZip = LoadBinaryMetadata("ppsystem.json", true);
	m_pItemZip = LoadBinaryMetadata("Item.csv", true);
	m_pCodisDataZip = LoadBinaryMetadata("CodisData.csv", true);
	m_pWeaponPropZip = LoadBinaryMetadata("WeaponProp.json", true);
	m_pModeEventZip = LoadBinaryMetadata("ModeEvent.csv", true);
	m_pEventShopZip = LoadBinaryMetadata("EventShop.csv", true);
	m_pFamilyTotalWarMapZip = LoadBinaryMetadata("FamilyTotalWarMap.csv", true);
	m_pFamilyTotalWarZip = LoadBinaryMetadata("FamilyTotalWar.json", true);
	m_pReinforceItemsExp = LoadBinaryMetadata("Metadata_ReinforceItemsExp.bin");
	m_pUnk3 = LoadBinaryMetadata("Metadata_Unk3.bin");
	m_pUnk8 = LoadBinaryMetadata("Metadata_Unk8.bin");
	m_pUnk20 = LoadBinaryMetadata("Metadata_Unk20.bin");
	m_pUnk31 = LoadBinaryMetadata("Metadata_Unk31.bin");
	m_pUnk43 = LoadBinaryMetadata("Metadata_Unk43.bin");
	m_pUnk49 = LoadBinaryMetadata("Metadata_Unk49.bin");
	m_pUnk54 = LoadBinaryMetadata("Metadata_Unk54.bin");
	m_pUnk55 = LoadBinaryMetadata("Metadata_Unk55.bin");

	if (!m_pMapListZip || !m_pClientTableZip || !m_pWeaponPartsZip || !m_pMileageShopZip || !m_pMatchingZip || !m_pProgressUnlockZip || !m_pGameModeListZip ||
		!m_pReinforceMaxLvlZip || !m_pReinforceMaxExpZip || !m_pItemExpireTimeZip || !m_pHonorMoneyShopZip || !m_pScenarioTX_CommonZip || !m_pScenarioTX_DediZip ||
		!m_pShopItemList_DediZip || !m_pZBCompetitiveZip || !m_pPPSystemZip || !m_pItemZip || !m_pCodisDataZip || !m_pWeaponPropZip || !m_pReinforceItemsExp ||
		!m_pUnk3 || !m_pUnk8 || !m_pUnk20 || !m_pUnk31 || !m_pUnk43 || !m_pUnk49 || !m_pModeEventZip || !m_pEventShopZip || !m_pFamilyTotalWarMapZip ||
		!m_pFamilyTotalWarZip || !m_pUnk54 || !m_pUnk55)
	{
		Logger().Fatal("Failed to load metadata\n");
		return false;
	}

	return true;
}

void CPacketManager::Shutdown()
{
	CBaseManager::Shutdown();

	if (m_pMapListZip)
		delete m_pMapListZip;
	if (m_pClientTableZip)
		delete m_pClientTableZip;
	if (m_pWeaponPartsZip)
		delete m_pWeaponPartsZip;
	if (m_pMileageShopZip)
		delete m_pMileageShopZip;
	if (m_pMatchingZip)
		delete m_pMatchingZip;
	if (m_pProgressUnlockZip)
		delete m_pProgressUnlockZip;
	if (m_pGameModeListZip)
		delete m_pGameModeListZip;
	if (m_pReinforceMaxLvlZip)
		delete m_pReinforceMaxLvlZip;
	if (m_pReinforceMaxExpZip)
		delete m_pReinforceMaxExpZip;
	if (m_pItemExpireTimeZip)
		delete m_pItemExpireTimeZip;
	if (m_pHonorMoneyShopZip)
		delete m_pHonorMoneyShopZip;
	if (m_pScenarioTX_CommonZip)
		delete m_pScenarioTX_CommonZip;
	if (m_pScenarioTX_DediZip)
		delete m_pScenarioTX_DediZip;
	if (m_pShopItemList_DediZip)
		delete m_pShopItemList_DediZip;
	if (m_pZBCompetitiveZip)
		delete m_pZBCompetitiveZip;
	if (m_pPPSystemZip)
		delete m_pPPSystemZip;
	if (m_pItemZip)
		delete m_pItemZip;
	if (m_pCodisDataZip)
		delete m_pCodisDataZip;
	if (m_pWeaponPropZip)
		delete m_pWeaponPropZip;
	if (m_pModeEventZip)
		delete m_pModeEventZip;
	if (m_pEventShopZip)
		delete m_pEventShopZip;
	if (m_pFamilyTotalWarMapZip)
		delete m_pFamilyTotalWarMapZip;
	if (m_pFamilyTotalWarZip)
		delete m_pFamilyTotalWarZip;

	if (m_pReinforceItemsExp)
		delete m_pReinforceItemsExp;
	if (m_pUnk3)
		delete m_pUnk3;
	if (m_pUnk8)
		delete m_pUnk8;
	if (m_pUnk20)
		delete m_pUnk20;
	if (m_pUnk31)
		delete m_pUnk31;
	if (m_pUnk43)
		delete m_pUnk43;
	if (m_pUnk49)
		delete m_pUnk49;
	if (m_pUnk54)
		delete m_pUnk54;
	if (m_pUnk55)
		delete m_pUnk55;
}

CSendPacket* CPacketManager::CreatePacket(IExtendedSocket* socket, int msgID)
{
	return new CSendPacket(socket->GetSeq(), msgID);
}

CBinMetadata* CPacketManager::LoadBinaryMetadata(const char* fileName, bool zip)
{
	char path[MAX_PATH];
	snprintf(path, MAX_PATH, "Data/%s", fileName);

	FILE* f = fopen(path, "rb");
	if (!f)
	{
		Logger().Error("CPacketManager::LoadBinaryMetadata: couldn't load Data/%s\n", fileName);
		return NULL;
	}

	fseek(f, 0, SEEK_END);
	size_t size = ftell(f);
	rewind(f);

	void* buffer = malloc(sizeof(char) * size);
	if (buffer == NULL)
	{
		Logger().Error("CPacketManager::LoadBinaryMetadata: failed to allocate memory for Data/%s\n", fileName);
		fclose(f);
		return NULL;
	}

	size_t result = fread(buffer, sizeof(char), size, f);
	if (result != size)
	{
		Logger().Error("CPacketManager::LoadBinaryMetadata: failed to read file Data/%s\n", fileName);
		fclose(f);
		free(buffer);
		return NULL;
	}

	fclose(f);

	if (zip)
	{
		// create zip and get stream data
		zip_t *zipStream = zip_stream_open(NULL, 0, ZIP_DEFAULT_COMPRESSION_LEVEL, 'w');
		zip_entry_open(zipStream, fileName);
		zip_entry_write(zipStream, buffer, result);
		zip_entry_close(zipStream);

		free(buffer);

		zip_stream_copy(zipStream, &buffer, &size);
		zip_stream_close(zipStream);
	}

	return new CBinMetadata(buffer, size);
}

void CPacketManager::SendUMsgNoticeMsgBoxToUuid(IExtendedSocket* socket, const string& text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageMsgBox);
	msg->WriteString(text);
	socket->Send(msg);
}

void CPacketManager::SendUMsgNoticeMessageInChat(IExtendedSocket* socket, const string& text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageInChat);
	msg->WriteString(text);
	socket->Send(msg);
}

/*void CPacketManager::SendUMsgNoticeMsgBoxToUuid(IExtendedSocket* socket, const string& text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageMsgBox);
	msg->WriteString(text);
	socket->Send(msg);
}*/

void CPacketManager::SendUMsgSystemReply(IExtendedSocket* socket, int type, const string& replyMsg, const vector<string>& additionalText)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(type);

	msg->WriteString(replyMsg);
	msg->WriteUInt8(additionalText.size());

	for (auto& str : additionalText)
		msg->WriteString(str);

	socket->Send(msg);
}

void CPacketManager::SendUMsgUserMessage(IExtendedSocket* socket, int type, const string& senderName, const string& text, int whisperType)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(type);

	if (type == UMsgPacketType::WhisperUserMessage)
		msg->WriteUInt8(whisperType);

	msg->WriteString(senderName);
	msg->WriteString(text);

	socket->Send(msg);
}

unsigned char rawData4[1290] = {
	0x41, 0xE3, 0x27, 0x01, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77,
	0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F,
	0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x65, 0x6E, 0x2F, 0x77, 0x65, 0x65, 0x6B,
	0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74,
	0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D,
	0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x34, 0xF4, 0xA8,
	0x01, 0xF4, 0x42, 0xA9, 0x01, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x20,
	0x43, 0x61, 0x6C, 0x65, 0x6E, 0x64, 0x61, 0x72, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x28, 0x31, 0x32, 0x2F, 0x31, 0x34, 0x20, 0xE2, 0x80,
	0x93, 0x20, 0x31, 0x32, 0x2F, 0x32, 0x38, 0x29, 0x00, 0x43, 0x6F, 0x6D,
	0x70, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x20, 0x64, 0x61, 0x79, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x6C,
	0x61, 0x69, 0x6D, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x21, 0x20, 0x0D, 0x0A, 0x0D, 0x0A, 0x2A, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x2F, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x3A, 0x20, 0x43, 0x6C, 0x69,
	0x63, 0x6B, 0x20, 0x60, 0x43, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x60, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70,
	0x70, 0x6C, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77,
	0x20, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x31,
	0x2C, 0x35, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65,
	0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x32, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x60, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x60,
	0x20, 0x74, 0x61, 0x62, 0x20, 0x28, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x29, 0x20, 0x2D, 0x20, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x35, 0x2C, 0x30, 0x30, 0x30,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x0D, 0x0A, 0x2D, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x3A, 0x20, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69, 0x6E,
	0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x66, 0x72,
	0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x70, 0x20,
	0x2D, 0x20, 0x47, 0x65, 0x74, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20, 0x41, 0x64,
	0x64, 0x2D, 0x4F, 0x6E, 0x20, 0x52, 0x61, 0x74, 0x65, 0x20, 0x42, 0x6F,
	0x78, 0x20, 0x78, 0x33, 0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63,
	0x6B, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6F, 0x74,
	0x74, 0x6F, 0x6D, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C,
	0x6F, 0x62, 0x62, 0x79, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x20,
	0x61, 0x6E, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x52, 0x61,
	0x74, 0x65, 0x2D, 0x55, 0x70, 0x20, 0x2B, 0x31, 0x30, 0x25, 0x20, 0x78,
	0x33, 0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F,
	0x6E, 0x20, 0x35, 0x3A, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x20, 0x4F, 0x72,
	0x69, 0x67, 0x69, 0x6E, 0x61, 0x6C, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F,
	0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x5A, 0x20,
	0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43, 0x6C, 0x61,
	0x73, 0x73, 0x69, 0x63, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x48, 0x65, 0x72, 0x6F, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x45, 0x76, 0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43,
	0x6F, 0x6E, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2F, 0x20, 0x48, 0x69,
	0x64, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x53, 0x65, 0x65, 0x6B, 0x20,
	0x6D, 0x6F, 0x64, 0x65, 0x20, 0x31, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20,
	0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x55, 0x6E,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72,
	0x20, 0x78, 0x32, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x36, 0x3A, 0x20, 0x4C, 0x6F, 0x67, 0x20, 0x49, 0x6E,
	0x20, 0x6F, 0x6E, 0x20, 0x41, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x44, 0x61, 0x79, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65,
	0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20,
	0x2B, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x0D, 0x0A, 0x0D, 0x0A, 0x2A, 0x20, 0x4E, 0x6F, 0x74,
	0x69, 0x63, 0x65, 0x0D, 0x0A, 0x2D, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x0D, 0x0A, 0x2D, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x20, 0x74, 0x68,
	0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x62, 0x65, 0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69,
	0x6E, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x2E,
	0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x6D, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6C, 0x65, 0x61,
	0x72, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x63,
	0x6C, 0x65, 0x61, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x4D, 0x69, 0x73, 0x73,
	0x69, 0x6F, 0x6E, 0x20, 0x36, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x61,
	0x69, 0x6D, 0x20, 0x69, 0x74, 0x73, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61,
	0x6E, 0x20, 0x66, 0x75, 0x6C, 0x66, 0x69, 0x6C, 0x6C, 0x20, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x36, 0x60, 0x73, 0x20, 0x63, 0x6F,
	0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x6F, 0x75, 0x74, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x6C, 0x6F, 0x67, 0x2D, 0x69, 0x6E, 0x73,
	0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x72, 0x79, 0x64, 0x61, 0x79, 0x20, 0x61, 0x74, 0x20, 0x6D, 0x69,
	0x64, 0x6E, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x59,
	0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20,
	0x64, 0x6F, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20,
	0x64, 0x61, 0x79, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x76, 0x65, 0x6E, 0x74, 0x2E, 0x00
};

void CPacketManager::SendUMsgNotice(IExtendedSocket* socket, const Notice_s& notice, bool openDailyRewardsDialogOnClose)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::Notice);

	msg->WriteUInt16(notice.id + 10000);
	msg->WriteUInt8(notice.type);
	msg->WriteString("https://discord.com/invite/EvUAY6D");
	msg->WriteUInt32(notice.startDate);
	msg->WriteUInt32(notice.endDate);
	msg->WriteString(notice.name);
	msg->WriteString(notice.description);

	socket->Send(msg);
}

void CPacketManager::SendUMsgExpiryNotice(IExtendedSocket* socket, const vector<int>& expiryItems)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::ExpiredItem);
	msg->WriteUInt8(expiryItems.size());
	for (auto item : expiryItems)
	{
		msg->WriteUInt16(item);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendUMsgRewardNotice(IExtendedSocket* socket, const RewardNotice& reward, string title, string description, bool localized, bool inGame, bool scen)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	if (localized && !scen)
	{
		msg->WriteUInt8(inGame ? UMsgPacketType::RewardInGameNoticeMsgLocalized : UMsgPacketType::RewardNoticeMsgLocalized);
	}
	else if (scen)
	{
		msg->WriteUInt8(UMsgPacketType::RewardInGameNoticeScenario);
	}
	else
	{
		msg->WriteUInt8(inGame ? UMsgPacketType::RewardInGameNoticeMsg : UMsgPacketType::RewardNoticeMsg);
	}

	msg->WriteUInt16(reward.items.size());

	for (auto& item : reward.items)
	{
		msg->WriteUInt16(item.itemID);
		msg->WriteUInt16(item.count);
		msg->WriteUInt16(item.duration);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);

		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}

		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}

		msg->WriteUInt8(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
	}

	msg->WriteUInt8(reward.points ? 1 : 0);
	if (reward.points)
		msg->WriteUInt32(reward.points);

	msg->WriteUInt8(reward.exp ? 1 : 0);
	if (reward.exp)
		msg->WriteUInt32(reward.exp);

	msg->WriteUInt8(reward.honorPoints ? 1 : 0);
	if (reward.honorPoints)
		msg->WriteUInt32(reward.honorPoints);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt16(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}

	msg->WriteString(title);
	msg->WriteString(description);

	msg->WriteUInt8(0); // additional str
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendUMsgRewardSelect(IExtendedSocket* socket, Reward* reward)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(RewardNoticeSelect);

	msg->WriteUInt8(0); // unknown
	msg->WriteUInt16(0);
	msg->WriteUInt8(reward->items.size()); // items count
	for (auto& item : reward->items)
	{
		msg->WriteUInt8(1); // case
		msg->WriteUInt32(item.selectID);
		// case 1
		msg->WriteUInt16(item.itemID);
		msg->WriteUInt16(item.count);
		msg->WriteUInt16(item.duration);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
		msg->WriteUInt8(0); // cycle count
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}
		msg->WriteUInt8(0);
	}

	msg->WriteString(reward->title); // reward title
	msg->WriteString(reward->description); // reward desc
	msg->WriteUInt8(0); // additional strings count
	msg->WriteUInt32(reward->rewardId);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendServerList(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::ServerList);
	msg->BuildHeader();
	msg->WriteUInt8(g_ChannelManager.channelServers.size());
	for (auto server : g_ChannelManager.channelServers)
	{
		msg->WriteUInt8(server->GetID());
		msg->WriteUInt8(1);
		msg->WriteUInt8(0);
		msg->WriteString(server->GetName());
		msg->WriteUInt8(server->GetChannels().size());
		for (auto chn : server->GetChannels())
		{
			msg->WriteUInt8(chn->GetID());
			msg->WriteString(chn->GetName());
			msg->WriteUInt16(0);
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendStatistic(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Statistic);
	msg->BuildHeader();
	msg->WriteUInt8(0);
	msg->WriteUInt8(1);
	socket->Send(msg);
}

void CPacketManager::SendInventoryAdd(IExtendedSocket* socket, const vector<CUserInventoryItem>& items, int curSlot)
{
	int itemsToSend = items.size();
	int itemStart = 0;
	int itemSent = 0;
	Buffer buf;
	do
	{
		CSendPacket* msg = CreatePacket(socket, PacketId::Inventory);
		msg->BuildHeader();

		msg->WriteUInt32(0);
		msg->WriteUInt16(0); // items count

		for (int i = itemStart; i < itemsToSend; i++)
		{
			const CUserInventoryItem& item = items[i];
			if (curSlot)
			{
				buf.writeUInt16_LE(curSlot++);
			}
			else
			{
				buf.writeUInt16_LE(item.GetGameSlot());
			}

			buf.writeUInt8(item.m_nItemID != 0); // not empty slot
			if (item.m_nItemID != 0)
			{
				buf.writeUInt16_LE(item.m_nItemID);
				buf.writeUInt16_LE(item.m_nCount);
				buf.writeUInt8(item.m_nStatus);
				buf.writeUInt8(item.m_nInUse);
				buf.writeUInt32_LE(item.m_nObtainDate);
				buf.writeUInt32_LE(item.m_nExpiryDate);

				buf.writeUInt16_LE(item.m_nPaintID);
				buf.writeUInt16_LE(item.m_nPaintIDList.size());
				for (auto paintID : item.m_nPaintIDList)
				{
					buf.writeUInt16_LE(paintID);
				}

				buf.writeUInt16_LE(item.m_nEnhancementLevel);
				buf.writeUInt32_LE(item.m_nEnhancementExp);
				buf.writeUInt32_LE(item.m_nEnhanceValue);

				buf.writeUInt8(0); // is storage item
				buf.writeUInt32_LE(0); // itemID or timestamp

				buf.writeUInt8(item.GetPartCount());
				if (item.m_nPartSlot1)
				{
					buf.writeUInt8(0);
					buf.writeUInt16_LE(item.m_nPartSlot1);
				}
				if (item.m_nPartSlot2)
				{
					buf.writeUInt8(1);
					buf.writeUInt16_LE(item.m_nPartSlot2);
				}

				buf.writeUInt8(item.m_nInUse);

				// unk shit #2
				buf.writeUInt8(0); // bound flag (idk what is it)
				buf.writeUInt8(item.m_nLockStatus); // 0 - locked, 1 - unlocked, 2 - special item

				// unk shit
				buf.writeUInt32_LE(0); // unk
				buf.writeUInt8(0); // unk array size
				for (int i = 0; i < 0; i++)
				{
					buf.writeUInt8(i++);
					buf.writeUInt16_LE(0);
				}
			}

			if ((buf.getBuffer().size() + msg->GetData().getBuffer().size()) > PACKET_MAX_SIZE)
			{
				buf.clear();
				break;
			}

			msg->WriteArray(buf.getBuffer());

			itemSent++;
			buf.clear();
		}

		msg->SetWriteOffset(PACKET_HEADER_SIZE + 1 + 4); // PACKET_HEADER_SIZE + PACKET ID + UNK_32
		msg->SetOverride(true);
		msg->WriteUInt16(itemSent);
		msg->SetOverride(false);

		socket->Send(msg);

		itemStart += itemSent;
		itemSent = 0;
	} while (itemStart != itemsToSend);
}

// Note: you can remove only 1 item from the vector
void CPacketManager::SendInventoryRemove(IExtendedSocket* socket, const vector<CUserInventoryItem>& items, bool gameSlot)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Inventory);
	msg->BuildHeader();
	msg->WriteUInt32(0);
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(gameSlot ? item.GetGameSlot() : item.m_nSlot);
		msg->WriteUInt8(0);
	}
	socket->Send(msg);
}

void CPacketManager::SendVersion(IExtendedSocket* socket, int result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Version);
	msg->BuildHeader();
	msg->WriteUInt8(result); // 0 - Packet Version Ok, 1 - Packet Version Invalid, 2 - Packet Version Patch
	socket->Send(msg);
}

void CPacketManager::SendUserStart(IExtendedSocket* socket, int userID, const string& userName, const string& gameName, bool firstConnect)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserStart);
	msg->BuildHeader();
	msg->WriteUInt32(userID);
	msg->WriteString(userName);
	msg->WriteString(gameName);
	msg->WriteUInt8(firstConnect); // first connect
	msg->WriteUInt8(0); // country code
	msg->WriteUInt8(0); // region code
	msg->WriteUInt32(0); // UserSN
	msg->WriteUInt8(0); // unk
	socket->Send(msg);
}

void CPacketManager::SendOption(IExtendedSocket* socket, vector<unsigned char>& config)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(0);
	msg->WriteUInt16(config.size());
	msg->WriteData(config.data(), config.size());

	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(1);
	msg->WriteUInt32(0xF41DC);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk2(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk3(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(2);
	msg->WriteUInt8(1);
	msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendMetadataMaplist(IExtendedSocket* socket)
{
	if (!m_pMapListZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_MapList);

	msg->WriteUInt16(m_pMapListZip->GetBufSize());
	msg->WriteData(m_pMapListZip->GetBuf(), m_pMapListZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataClientTable(IExtendedSocket* socket)
{
	if (!m_pClientTableZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ClientTable);

	msg->WriteUInt16(m_pClientTableZip->GetBufSize());
	msg->WriteData(m_pClientTableZip->GetBuf(), m_pClientTableZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponParts(IExtendedSocket* socket)
{
	if (!m_pWeaponPartsZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_WeaponParts);

	msg->WriteUInt16(m_pWeaponPartsZip->GetBufSize());
	msg->WriteData(m_pWeaponPartsZip->GetBuf(), m_pWeaponPartsZip->GetBufSize());

	socket->Send(msg);
}

// unused
void CPacketManager::SendMetadataModelist(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ModeList);
	msg->WriteUInt16(sizeof(metaData2)); // size

	msg->WriteData(metaData2, sizeof(metaData2));

	socket->Send(msg);
}

void CPacketManager::SendMetadataMatchOption(IExtendedSocket* socket)
{
	if (!m_pMatchingZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_MatchOption);

	msg->WriteUInt16(m_pMatchingZip->GetBufSize());
	msg->WriteData(m_pMatchingZip->GetBuf(), m_pMatchingZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataProgressUnlock(IExtendedSocket* socket)
{
	if (!m_pProgressUnlockZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ProgressUnlock); // progress_unlock.csv

	msg->WriteUInt16(m_pProgressUnlockZip->GetBufSize());
	msg->WriteData(m_pProgressUnlockZip->GetBuf(), m_pProgressUnlockZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk8(IExtendedSocket* socket)
{
	if (!m_pUnk8)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk8->GetBuf(), m_pUnk8->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponPaints(IExtendedSocket* socket, std::vector<WeaponPaint>& weaponPaints)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_WeaponPaints);

	msg->WriteUInt16(weaponPaints.size());
	for (auto &weaponPaint : weaponPaints)
	{
		msg->WriteUInt16(weaponPaint.itemID);

		msg->WriteUInt16(weaponPaint.paintIDs.size());
		for (auto &paintID : weaponPaint.paintIDs)
		{
			msg->WriteUInt16(paintID);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk3(IExtendedSocket* socket)
{
	if (!m_pUnk3)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk3->GetBuf(), m_pUnk3->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataItemBox(IExtendedSocket* socket, const vector<ItemBoxItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ItemBox);

	msg->WriteUInt32(items.size());

	for (auto& i : items)
	{
		msg->WriteUInt32(i.itemBoxItemID);
		msg->WriteUInt32(i.itemId);
		msg->WriteInt16(-1);
		msg->WriteUInt16(1);
		msg->WriteUInt8(3);
		msg->WriteUInt8(0);
		msg->WriteUInt8(1);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
		msg->WriteUInt16(0); // enhance?
		msg->WriteUInt8(0); // part count?
		if (0)
		{
			for (int i = 0; i < 1; i++)
				msg->WriteUInt16(4001);
		}
		msg->WriteUInt16(0);
		msg->WriteUInt8(0);

	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataEncyclopedia(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(metaData_Encyclopedia, sizeof(metaData_Encyclopedia));

	socket->Send(msg);
}

void CPacketManager::SendMetadataGameModeList(IExtendedSocket* socket)
{
	if (!m_pGameModeListZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_GameModeList);

	msg->WriteUInt16(m_pGameModeListZip->GetBufSize());
	msg->WriteData(m_pGameModeListZip->GetBuf(), m_pGameModeListZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceMaxLvl(IExtendedSocket* socket)
{
	if (!m_pReinforceMaxLvlZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ReinforceMaxLvl);

	msg->WriteUInt16(m_pReinforceMaxLvlZip->GetBufSize());
	msg->WriteData(m_pReinforceMaxLvlZip->GetBuf(), m_pReinforceMaxLvlZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceMaxEXP(IExtendedSocket* socket)
{
	if (!m_pReinforceMaxExpZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ReinforceMaxEXP);

	msg->WriteUInt16(m_pReinforceMaxExpZip->GetBufSize());
	msg->WriteData(m_pReinforceMaxExpZip->GetBuf(), m_pReinforceMaxExpZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceItemsExp(IExtendedSocket* socket)
{
	if (!m_pReinforceItemsExp)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pReinforceItemsExp->GetBuf(), m_pReinforceItemsExp->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataItemExpireTime(IExtendedSocket* socket)
{
	if (!m_pItemExpireTimeZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ItemExpireTime);

	msg->WriteUInt16(m_pItemExpireTimeZip->GetBufSize());
	msg->WriteData(m_pItemExpireTimeZip->GetBuf(), m_pItemExpireTimeZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk20(IExtendedSocket* socket)
{
	if (!m_pUnk20)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk20->GetBuf(), m_pUnk20->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataZombieWarWeaponList(IExtendedSocket* socket, std::vector<int>& zombieWarWeapons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ZombieWarWeaponList);

	msg->WriteUInt16(zombieWarWeapons.size());
	for (auto &itemID : zombieWarWeapons)
	{
		msg->WriteUInt32(itemID);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataRandomWeaponList(IExtendedSocket* socket, std::vector<RandomWeapon>& randomWeapons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_RandomWeaponList);

	msg->WriteUInt32(randomWeapons.size());
	for (auto &randomWeapon : randomWeapons)
	{
		msg->WriteUInt32(randomWeapon.itemID);
		msg->WriteUInt32(randomWeapon.modeFlags.size());
		for (auto &modeFlag : randomWeapon.modeFlags)
		{
			msg->WriteUInt8(modeFlag.modeFlag);
			msg->WriteUInt32(modeFlag.dropRate);
			msg->WriteUInt32(modeFlag.enhanceProbability);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataHash(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	//msg->WriteData(metaData_255, sizeof(metaData_255));

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk31(IExtendedSocket* socket)
{
	if (!m_pUnk31)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk31->GetBuf(), m_pUnk31->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataHonorMoneyShop(IExtendedSocket* socket)
{
	if (!m_pHonorMoneyShopZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_HonorMoneyShop);

	msg->WriteUInt16(m_pHonorMoneyShopZip->GetBufSize());
	msg->WriteData(m_pHonorMoneyShopZip->GetBuf(), m_pHonorMoneyShopZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataScenarioTX_Common(IExtendedSocket* socket)
{
	if (!m_pScenarioTX_CommonZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ScenarioTX_Common);

	msg->WriteUInt16(m_pScenarioTX_CommonZip->GetBufSize());
	msg->WriteData(m_pScenarioTX_CommonZip->GetBuf(), m_pScenarioTX_CommonZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataScenarioTX_Dedi(IExtendedSocket* socket)
{
	if (!m_pScenarioTX_DediZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ScenarioTX_Dedi);

	msg->WriteUInt16(m_pScenarioTX_DediZip->GetBufSize());
	msg->WriteData(m_pScenarioTX_DediZip->GetBuf(), m_pScenarioTX_DediZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataShopItemList_Dedi(IExtendedSocket* socket)
{
	if (!m_pShopItemList_DediZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ShopItemList_Dedi);

	msg->WriteUInt16(m_pShopItemList_DediZip->GetBufSize());
	msg->WriteData(m_pShopItemList_DediZip->GetBuf(), m_pShopItemList_DediZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataZBCompetitive(IExtendedSocket* socket)
{
	if (!m_pZBCompetitiveZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ZBCompetitive);

	msg->WriteUInt16(m_pZBCompetitiveZip->GetBufSize());
	msg->WriteData(m_pZBCompetitiveZip->GetBuf(), m_pZBCompetitiveZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk43(IExtendedSocket* socket)
{
	if (!m_pUnk43)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk43->GetBuf(), m_pUnk43->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk49(IExtendedSocket* socket)
{
	if (!m_pUnk49)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk49->GetBuf(), m_pUnk49->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponProp(IExtendedSocket* socket)
{
	if (!m_pWeaponPropZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_WeaponProp);

	msg->WriteUInt16(m_pWeaponPropZip->GetBufSize());
	msg->WriteData(m_pWeaponPropZip->GetBuf(), m_pWeaponPropZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataPPSystem(IExtendedSocket* socket)
{
	if (!m_pPPSystemZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_PPSystem);

	msg->WriteUInt16(m_pPPSystemZip->GetBufSize());
	msg->WriteData(m_pPPSystemZip->GetBuf(), m_pPPSystemZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataCodisData(IExtendedSocket* socket)
{
	if (!m_pCodisDataZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_CodisData);

	msg->WriteUInt16(m_pCodisDataZip->GetBufSize());
	msg->WriteData(m_pCodisDataZip->GetBuf(), m_pCodisDataZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataItem(IExtendedSocket* socket)
{
	if (!m_pItemZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_Item);

	msg->WriteUInt16(m_pItemZip->GetBufSize());
	msg->WriteData(m_pItemZip->GetBuf(), m_pItemZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataModeEvent(IExtendedSocket* socket)
{
	if (!m_pModeEventZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ModeEvent);

	msg->WriteUInt16(m_pModeEventZip->GetBufSize());
	msg->WriteData(m_pModeEventZip->GetBuf(), m_pModeEventZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataMileageShop(IExtendedSocket* socket)
{
	if (!m_pMileageShopZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_MileageShop);

	msg->WriteUInt16(m_pMileageShopZip->GetBufSize());
	msg->WriteData(m_pMileageShopZip->GetBuf(), m_pMileageShopZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataEventShop(IExtendedSocket* socket)
{
	if (!m_pEventShopZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_EventShop);

	msg->WriteUInt16(m_pEventShopZip->GetBufSize());
	msg->WriteData(m_pEventShopZip->GetBuf(), m_pEventShopZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataFamilyTotalWarMap(IExtendedSocket* socket)
{
	if (!m_pFamilyTotalWarMapZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_FamilyTotalWarMap);

	msg->WriteUInt16(m_pFamilyTotalWarMapZip->GetBufSize());
	msg->WriteData(m_pFamilyTotalWarMapZip->GetBuf(), m_pFamilyTotalWarMapZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataFamilyTotalWar(IExtendedSocket* socket)
{
	if (!m_pFamilyTotalWarZip)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_FamilyTotalWar);

	msg->WriteUInt16(m_pFamilyTotalWarZip->GetBufSize());
	msg->WriteData(m_pFamilyTotalWarZip->GetBuf(), m_pFamilyTotalWarZip->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk54(IExtendedSocket* socket)
{
	if (!m_pUnk54)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk54->GetBuf(), m_pUnk54->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk55(IExtendedSocket* socket)
{
	if (!m_pUnk55)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk55->GetBuf(), m_pUnk55->GetBufSize());

	socket->Send(msg);
}

void CPacketManager::SendGameMatchInfo(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	msg->WriteUInt8(40);

	msg->WriteUInt16(0x2D);
	msg->WriteUInt8(2); // split 16
	msg->WriteUInt8(1);
	msg->WriteString("");

	msg->WriteUInt8(4);

	msg->WriteUInt8(0);
	msg->WriteUInt8(3);
	msg->WriteUInt16(0x2D);
	msg->WriteString("Zombie3z");

	msg->WriteUInt8(1);
	msg->WriteUInt8(0);
	msg->WriteUInt16(0);
	msg->WriteString("quickstart");

	msg->WriteUInt8(2);
	msg->WriteUInt8(1);
	msg->WriteUInt16(0);
	msg->WriteString("roomlist");

	msg->WriteUInt8(3);
	msg->WriteUInt8(3);
	msg->WriteUInt16(0x26);
	msg->WriteString("studio");

	socket->Send(msg);
}

void CPacketManager::SendGameMatchUnk(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	vector<unsigned char> vec = { 0x65, 0x01, 0x0, 0xE, 0x0, 0x2, 0x0, 0xFF };
	for (auto& def : vec)
	{
		msg->WriteInt8(def);
	}

	socket->Send(msg);
}

void CPacketManager::SendGameMatchUnk9(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	msg->WriteUInt8(9);

	msg->WriteUInt16(0x20);
	msg->WriteUInt16(0x0E);
	msg->WriteUInt16(0x2);
	msg->WriteUInt16(0xFFFF);

	socket->Send(msg);
}

void CPacketManager::SendGameMatchFailMessage(IExtendedSocket* socket, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	msg->WriteUInt8(100);

	msg->WriteUInt8(0);
	msg->WriteUInt8(type); // Display message box with string #CSO_MATCH_FAIL_MSG_%d, %d is type

	socket->Send(msg);
}

void CPacketManager::SendReply(IExtendedSocket* socket, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Reply);
	msg->BuildHeader();

	msg->WriteUInt8(type);
	msg->WriteString("S_REPLY_OK");
	msg->WriteUInt8(0);

	socket->Send(msg);
}

unsigned char rawData1[5] = {
	0x16, 0x01, 0x00, 0x96, 0x08
};

unsigned char rawData2[420] = {
	0x08, 0x00, 0x01, 0x01, 0x70, 0x8A, 0x6C, 0x5C, 0xF0, 0x22, 0x90, 0x5C,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x05, 0x84, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x84, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x85,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x86, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char rawData3[4] = {
	0x08, 0x00, 0x00, 0x01
};

void CPacketManager::SendItemUnk1(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteData(rawData1, sizeof(rawData1));

	socket->Send(msg);
}
void CPacketManager::SendItemUnk3(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteData(rawData3, sizeof(rawData3));

	socket->Send(msg);
}

void CPacketManager::SendItemEquipTattoo(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::TattooEquip);

	socket->Send(msg);
}

void CPacketManager::SendItemDailyRewardsUpdate(IExtendedSocket* socket, const UserDailyRewards& dailyRewards)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::DailyRewards);

	msg->WriteUInt8(0); // updatedailyrewards

	msg->WriteUInt8(1);
	msg->WriteUInt32(1);

	if (1)
	{
		msg->WriteUInt32(222222);
		msg->WriteUInt32(222222);
		msg->WriteUInt64(0);
		msg->WriteUInt8(0x24);
		msg->WriteUInt64(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendItemDailyRewardsSpinResult(IExtendedSocket* socket, const RewardItem& item)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::DailyRewards);

	msg->WriteUInt8(1); // spinresult

	msg->WriteUInt32(item.itemID);
	msg->WriteUInt16(item.duration);
	msg->WriteUInt16(item.count);
	msg->WriteUInt8(1); // event flag

	socket->Send(msg);
}

void CPacketManager::SendItemOpenDecoderResult(IExtendedSocket* socket, const ItemBoxOpenResult& result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::OpenDecoder);

	msg->WriteUInt8(1); // result

	msg->WriteUInt32(result.itemBoxItemId); // decoder itemid
	msg->WriteUInt16(0); // mileage points
	msg->WriteUInt32(0xFAD); // 0xFAD PARTS ITEMID ?????????
	msg->WriteUInt8(result.items.size()); // item count
	for (auto& item : result.items)
	{
		msg->WriteUInt32(item.itemId);
		msg->WriteInt16(item.duration);
		msg->WriteUInt16(1); // units 1
		msg->WriteUInt8(item.grade);
		msg->WriteUInt8(0); // parts count
		if (0)
		{
			msg->WriteUInt16(0); // part item ID
		}
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendItemOpenDecoderErrorReply(IExtendedSocket* socket, ItemBoxError code)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	string text;

	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::OpenDecoder);
	switch (code)
	{
	case ItemBoxError::FAIL_INVENTORY_FULL:
		text = "LOTTERY_FAIL_INVENTORY_FULL";
		break;
	case ItemBoxError::FAIL_PAUSED:
		text = "LOTTERY_FAIL_PAUSED";
		break;
	case ItemBoxError::FAIL_USEITEM:
		text = "LOTTERY_FAIL_NOITEM";
		break;
	case ItemBoxError::NOT_KEY:
		text = "LOTTERY_NOT_KEY";
		break;
	default:
		text = "LOTTERY_FAIL_NOT_TERM";
	}

	msg->WriteUInt8(0);
	msg->WriteString(text);
	socket->Send(msg);
}

void CPacketManager::SendItemEnhanceResult(IExtendedSocket* socket, const EnhResult& result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(14);

	msg->WriteUInt8(result.status);
	if (result.status == ENHANCE_SUCCESS ||
		result.status == ENHANCE_LEVELDOWN ||
		result.status == ENHANCE_FULLLEVELDOWN)
	{
		msg->WriteUInt16(result.itemSlot);
		msg->WriteUInt16(result.enhLevel);
		msg->WriteUInt32(result.enhLevel);
		msg->WriteUInt8(result.enhAttribute);
	}

	if (result.status == ENHANCE_SUCCESS || result.status == ENHANCE_FAILURE)
		msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendItemWeaponPaintReply(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(17);
	msg->WriteUInt8(1);
	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendItemPartCheck(IExtendedSocket* socket, int slot, int partNum)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(21);
	msg->WriteUInt8(0);
	msg->WriteUInt16(slot);
	msg->WriteString("PARTS_SYSTEM_ERROR0");

	socket->Send(msg);
}

void CPacketManager::SendItemGachapon(IExtendedSocket* socket, int gachaponItem)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);

	msg->BuildHeader();
	msg->WriteUInt8(gachaponItem ? ItemPacketType::GachaponNotice : ItemPacketType::FabenduNotice);
	socket->Send(msg);
}

void CPacketManager::SendLobbyJoin(IExtendedSocket* socket, CChannel* channel)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::Join);
	msg->WriteUInt16(channel->GetOutsideUsers().size());
	for (auto user : channel->GetOutsideUsers())
	{
		msg->WriteUInt32(user->GetID());
		msg->WriteString("test_lobby");
		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), user->GetCharacter(UFLAG_LOW_ALL, UFLAG_HIGH_ALL));
	}
	socket->Send(msg);
}

void CPacketManager::SendLobbyUserJoin(IExtendedSocket* socket, IUser* joinedUser)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::UserJoin);
	msg->WriteUInt32(joinedUser->GetID()); // userid
	msg->WriteString("TIBE YEBAT'?");

	CUserCharacter character = joinedUser->GetCharacter(UFLAG_LOW_ALL, UFLAG_HIGH_ALL);

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, joinedUser->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendLobbyUserLeft(IExtendedSocket* socket, IUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::UserLeft);
	msg->WriteUInt32(user->GetID());

	socket->Send(msg);
}

void BuildRoomInfo(CSendPacket* msg, IRoom* room, int lFlag, int hFlag)
{
	msg->WriteUInt8(0);
	msg->WriteUInt32(room->GetID());
	msg->WriteUInt8(4);
	msg->WriteUInt8(0);
	msg->WriteUInt16(0x0E3E);

	// room info
	msg->WriteUInt32(lFlag);
	msg->WriteUInt32(hFlag);

	CRoomSettings* roomSettings = room->GetSettings();

	if (lFlag & RLFLAG_NAME) {
		msg->WriteString(roomSettings->roomName);
	}
	if (lFlag & RLFLAG_UNK) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_HASPASSWORD) {
		msg->WriteUInt8(room->HasPassword());
	}
	if (lFlag & RLFLAG_LEVELLIMIT) {
		msg->WriteUInt8(roomSettings->levelLimit);
	}
	if (lFlag & RLFLAG_GAMEMODE) {
		msg->WriteUInt8(roomSettings->gameModeId);
	}
	if (lFlag & RLFLAG_MAPID) {
		msg->WriteUInt16(roomSettings->mapId);
	}
	if (lFlag & RLFLAG_PLAYERS) {
		msg->WriteUInt8(room->GetNumOfPlayers());
	}
	if (lFlag & RLFLAG_MAXPLAYERS) {
		msg->WriteUInt8(roomSettings->maxPlayers);
	}
	if (lFlag & RLFLAG_WEAPONLIMIT) {
		msg->WriteUInt8(roomSettings->weaponLimit);
	}
	if (lFlag & RLFLAG_SUPERROOM) {
		msg->WriteUInt8(roomSettings->superRoom);
	}
	if (lFlag & RLFLAG_UNK2) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_HOSTNETINFO) {
		msg->WriteUInt16(0);
	}
	if (lFlag & RLFLAG_CLANBATTLE) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK3) {
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_STATUSSYMBOL) {
		msg->WriteUInt8(roomSettings->statusSymbol == 3 ? 2 : 0);
	}
	if (lFlag & RLFLAG_UNK4) {
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_KDRULE) {
		msg->WriteUInt8(roomSettings->kdRule);
	}
	if (lFlag & RLFLAG_UNK6) {
		msg->WriteUInt16(0);
	}
	if (lFlag & RLFLAG_UNK7) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_FRIENDLYFIRE) {
		msg->WriteUInt8(roomSettings->friendlyFire);
	}
	if (lFlag & RLFLAG_UNK9) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_RANDOMMAP) {
		msg->WriteUInt8(roomSettings->randomMap);
	}
	if (lFlag & RLFLAG_MAPPLAYLIST) {
		msg->WriteUInt8(roomSettings->mapPlaylistSize);
		for (size_t i = 0; i < roomSettings->mapPlaylistSize; i++)
		{
			msg->WriteUInt8(roomSettings->mapPlaylist[i].unk1);
			msg->WriteUInt16(roomSettings->mapPlaylist[i].mapId);
		}
	}
	if (lFlag & RLFLAG_UNK12) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_SD) {
		msg->WriteUInt8(roomSettings->sd);
	}
	if (lFlag & RLFLAG_ZSDIFFICULTY) {
		msg->WriteUInt8(roomSettings->zsDifficulty);
	}
	if (lFlag & RLFLAG_LEAGUERULE) {
		msg->WriteUInt8(roomSettings->leagueRule);
	}
	if (lFlag & RLFLAG_MANNERLIMIT) {
		msg->WriteUInt8(roomSettings->mannerLimit);
	}
	if (lFlag & RLFLAG_ZBLIMIT) {
		msg->WriteUInt8(roomSettings->zbLimitFlag);
		if (roomSettings->zbLimit.size() == 4)
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt32(roomSettings->zbLimit[i]);
			}
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt32(0);
			}
		}
	}
	if (lFlag & RLFLAG_UNK18) {
		msg->WriteUInt8(0);
	}

	if (hFlag & RLHFLAG_UNK) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_ISZBCOMPETITIVE) {
		msg->WriteUInt8(roomSettings->isZbCompetitive);
	}
	if (hFlag & RLHFLAG_ZBAUTOHUNTING) {
		msg->WriteUInt8(roomSettings->zbAutoHunting);
	}
	if (hFlag & RLHFLAG_UNK4) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_UNK5) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_FIREBOMB) {
		msg->WriteUInt8(roomSettings->fireBomb);
	}
	if (hFlag & RLHFLAG_MUTATIONRESTRICT) {
		msg->WriteUInt8(roomSettings->mutationRestrict);
	}
	if (hFlag & RLHFLAG_MUTATIONLIMIT) {
		msg->WriteUInt8(roomSettings->mutationLimit);
	}
	if (hFlag & RLHFLAG_UNK9) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_UNK10) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_WEAPONRESTRICT) {
		msg->WriteUInt8(roomSettings->weaponRestrict);
	}
	if (hFlag & RLHFLAG_FAMILYBATTLE) {
		msg->WriteUInt8(roomSettings->familyBattle);
	}
	if (hFlag & RLHFLAG_FAMILYBATTLECLANIDS) {
		msg->WriteUInt32(roomSettings->familyBattleClanID1);
		msg->WriteUInt32(roomSettings->familyBattleClanID2);
	}
	if (hFlag & RLHFLAG_WEAPONBUYCOOLTIME) {
		msg->WriteUInt8(roomSettings->weaponBuyCoolTime);
	}

	// studio related
	if (roomSettings->mapId == 254)
	{
		msg->WriteUInt32(roomSettings->voxelFlag);

		if (roomSettings->voxelFlag & VOXELFLAG_TITLE) {
			msg->WriteString(roomSettings->voxel_title);
		}
		if (roomSettings->voxelFlag & VOXELFLAG_IMAGEID) {
			msg->WriteString(roomSettings->voxel_image_id);
		}
	}
}

void CPacketManager::SendRoomListFull(IExtendedSocket* socket, const vector<IRoom*>& rooms)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::FullRoomList);
	msg->WriteUInt8(4);
	msg->WriteUInt16(0xFFFF);
	msg->WriteUInt16(0);
	msg->WriteUInt16(1);
	msg->WriteUInt16(0);

	msg->WriteUInt16(2);
	msg->WriteUInt16(1);
	msg->WriteUInt8(rooms.size()); // room count

	for (auto room : rooms)
	{
		BuildRoomInfo(msg, room, RLFLAG_ALL, RLHFLAG_ALL);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomListAdd(IExtendedSocket* socket, IRoom* room)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::AddRoom);

	BuildRoomInfo(msg, room);

	socket->Send(msg);
*/
}

void CPacketManager::SendRoomListUpdate(IExtendedSocket* socket, IRoom* room)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::UpdateRoom);

	BuildRoomInfo(msg, room);

	socket->Send(msg);
*/
}

void CPacketManager::SendRoomListRemove(IExtendedSocket* socket, int roomID)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::RemoveRoom);
	msg->WriteUInt16(roomID);

	socket->Send(msg);
*/
}

void CPacketManager::SendShopUpdate(IExtendedSocket* socket, const vector<Product>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdateProducts);
	msg->WriteUInt8(products.size());

	for (auto& product : products)
	{
		msg->WriteUInt32(product.relationProductID);
		msg->WriteUInt8(product.isPoints);
		msg->WriteUInt8(product.subProducts.size());
		for (auto& subproduct : product.subProducts)
		{
			msg->WriteUInt32(subproduct.productID);
			msg->WriteInt16(subproduct.items[0].duration);
			msg->WriteUInt8(1);
			msg->WriteUInt16(subproduct.items[0].count);
			msg->WriteUInt32(subproduct.price);
			msg->WriteUInt32(subproduct.additionalPoints);
			msg->WriteUInt8(subproduct.adType);
			msg->WriteUInt8(0);
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(0);
			}
		}
	}

	msg->WriteString("UAH"); // currency 

	socket->Send(msg);
}

void CPacketManager::SendShopReply(IExtendedSocket* socket, int replyCode)
{
	string replyMsg;

	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::BuyReply);
	msg->WriteUInt8(0);

	switch (replyCode)
	{
	case 1:
		replyMsg = "BUY_OK";
		break;
	case 2:
		replyMsg = "BUY_FAIL_NOITEM";
		break;
	case 3:
		replyMsg = "BUY_FAIL_NO_POINT";
		break;
	case 4:
		replyMsg = "BUY_FAIL_INVENTORY_FULL";
		break;
	default:
		replyMsg = "BUY_FAIL_SYSTEM_ERROR";
		break;
	};
	msg->WriteString(replyMsg);

	socket->Send(msg);
}

void CPacketManager::SendShopBuyProductReply(IExtendedSocket* socket, int replyCode)
{
	string replyMsg;

	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::RequestBuyProduct);

	msg->WriteUInt8(1);
	switch (replyCode)
	{
	case 1:
		replyMsg = "BUY_OK";
		break;
	case 2:
		replyMsg = "BUY_FAIL_NOITEM";
		break;
	case 3:
		replyMsg = "BUY_FAIL_NO_POINT";
		break;
	case 4:
		replyMsg = "BUY_FAIL_INVENTORY_FULL";
		break;
	default:
		replyMsg = "BUY_FAIL_SYSTEM_ERROR";
		break;
	};
	msg->WriteString(replyMsg);
	msg->WriteUInt16(0);

	socket->Send(msg);
}

void CPacketManager::SendShopRecommendedProducts(IExtendedSocket* socket, const vector<vector<int>>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdateRecommendedProducts);
	msg->WriteUInt32(products.size()); // page
	for (auto& product : products)
	{
		msg->WriteString("Test");
		msg->WriteString("Test2");
		msg->WriteUInt32(0);
		msg->WriteUInt32(product.size()); // 6 items per page
		for (auto id : product)
		{
			msg->WriteUInt32(id);
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendShopPopularProducts(IExtendedSocket* socket, const vector<int>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdatePopularProducts);
	msg->WriteUInt32(products.size()); // max 4
	for (auto product : products)
	{
		msg->WriteUInt32(product);
	}

	socket->Send(msg);
}

void CPacketManager::SendSearchRoomNotice(IExtendedSocket* socket, IRoom* room, const string& invitersGameName, const string& inviteMsg)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::SearchRoom);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	CChannel* channel = room->GetParentChannel();
	CChannelServer* channelServer = channel->GetParentChannelServer();

	msg->WriteUInt8(channelServer->GetID());
	msg->WriteUInt8(channel->GetID());
	msg->WriteUInt16(room->GetID());

	// short room info
	CRoomSettings* roomSettings = room->GetSettings();
	msg->WriteUInt8(roomSettings->gameModeId);
	msg->WriteUInt8(roomSettings->mapId);
	msg->WriteUInt8(roomSettings->maxPlayers);
	msg->WriteUInt8(9);
	msg->WriteUInt8(10);
	msg->WriteUInt8(11);
	msg->WriteUInt8(1); // array size
	msg->WriteUInt8(22);
	msg->WriteUInt8(33);

	msg->WriteUInt8(1);

	msg->WriteString((const char*)OBFUSCATE("228 unk str"));
	msg->WriteString(invitersGameName);
	msg->WriteString(inviteMsg);

	socket->Send(msg);
}

void CPacketManager::SendUserUpdateInfo(IExtendedSocket* socket, IUser* user, const CUserCharacter& character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserUpdateInfo);
	msg->BuildHeader();
	msg->WriteUInt32(user->GetID());

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendUserSurvey(IExtendedSocket* socket, const Survey& survey)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserSurvey);
	msg->BuildHeader();

	msg->WriteUInt8(0);

	msg->WriteUInt32(survey.id);
	msg->WriteString(survey.title);
	msg->WriteUInt8(survey.questions.size());
	for (auto& question : survey.questions)
	{
		msg->WriteUInt8(question.id); // survey subid
		msg->WriteString(question.question);
		msg->WriteUInt8(question.answerType); // 0 - checkboxes, 1 - textentry, 2 - unk

		if (question.answerType == 1)
		{
			msg->WriteUInt16(question.answerTextEntry.unk);
		}
		else
		{
			msg->WriteUInt8(question.answerCheckBoxType); // 0 - ваще выбирать не можешь))) 1 - only one choose, 2 - multiple choose
			msg->WriteUInt8(question.answersCheckBox.size());
			for (auto& answer : question.answersCheckBox)
			{
				msg->WriteUInt8(answer.id);
				msg->WriteString(answer.answer);
			}
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendUserSurveyReply(IExtendedSocket* socket, int result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserSurvey);
	msg->BuildHeader();

	msg->WriteUInt8(11);

	msg->WriteUInt8(result);

	/*msg->WriteUInt8(12); // error

	msg->WriteUInt8(1);
	msg->WriteUInt8(0);
	if (1)
	{
	msg->WriteString("HTO YA?");
	}*/

	socket->Send(msg);
}

void WriteSettings(CSendPacket* msg, CRoomSettings* newSettings, int low, int lowMid, int highMid, int high)
{
	int lowFlag = 0;
	int lowMidFlag = 0;
	int highMidFlag = 0;
	int highFlag = 0;

	if (low || lowMid || highMid || high)
	{
		lowFlag = low;
		lowMidFlag = lowMid;
		highMidFlag = highMid;
		highFlag = high;
	}
	else
	{
		lowFlag = newSettings->lowFlag;
		lowMidFlag = newSettings->lowMidFlag;
		highMidFlag = newSettings->highMidFlag;
		highFlag = newSettings->highFlag;
	}

	msg->WriteUInt32(lowFlag);
	msg->WriteUInt32(lowMidFlag);
	msg->WriteUInt32(highMidFlag);
	msg->WriteUInt32(highFlag);

	if (lowFlag & ROOM_LOW_ROOMNAME) {
		msg->WriteString(newSettings->roomName);
	}
	if (lowFlag & ROOM_LOW_UNK) {
		msg->WriteUInt8(newSettings->unk00);
	}
	if (lowFlag & ROOM_LOW_CLANBATTLE) {
		msg->WriteUInt8(newSettings->unk01);
		msg->WriteUInt8(newSettings->unk02);
		msg->WriteUInt8(newSettings->unk03);
		msg->WriteUInt32(newSettings->unk04);
	}
	if (lowFlag & ROOM_LOW_PASSWORD) {
		msg->WriteString(newSettings->password);
	}
	if (lowFlag & ROOM_LOW_LEVELLIMIT) {
		msg->WriteUInt8(newSettings->levelLimit);
	}
	if (lowFlag & ROOM_LOW_UNK7) {
		msg->WriteUInt8(newSettings->unk07);
	}
	if (lowFlag & ROOM_LOW_GAMEMODEID) {
		msg->WriteUInt8(newSettings->gameModeId);
	}
	if (lowFlag & ROOM_LOW_MAPID) {
		msg->WriteUInt16(newSettings->mapId);
	}
	if (lowFlag & ROOM_LOW_MAXPLAYERS) {
		msg->WriteUInt8(newSettings->maxPlayers);
	}
	if (lowFlag & ROOM_LOW_WINLIMIT) {
		msg->WriteUInt8(newSettings->winLimit);
	}
	if (lowFlag & ROOM_LOW_KILLLIMIT) {
		msg->WriteUInt16(newSettings->killLimit);
	}
	if (lowFlag & ROOM_LOW_GAMETIME) {
		msg->WriteUInt8(newSettings->gameTime);
	}
	if (lowFlag & ROOM_LOW_ROUNDTIME) {
		msg->WriteUInt8(newSettings->roundTime);
	}
	if (lowFlag & ROOM_LOW_WEAPONLIMIT) {
		msg->WriteUInt8(newSettings->weaponLimit);
		if (newSettings->weaponLimit == 18)
			msg->WriteArray(newSettings->weaponLimitCustom);
	}
	if (lowFlag & ROOM_LOW_HOSTAGEKILLLIMIT) {
		msg->WriteUInt8(newSettings->hostageKillLimit);
	}
	if (lowFlag & ROOM_LOW_FREEZETIME) {
		msg->WriteUInt8(newSettings->freezeTime);
	}
	if (lowFlag & ROOM_LOW_BUYTIME) {
		msg->WriteUInt8(newSettings->buyTime);
	}
	if (lowFlag & ROOM_LOW_DISPLAYNICKNAME) {
		msg->WriteUInt8(newSettings->displayNickname);
	}
	if (lowFlag & ROOM_LOW_TEAMBALANCE) {
		msg->WriteUInt8(newSettings->teamBalance);
	}
	if (lowFlag & ROOM_LOW_UNK21) {
		msg->WriteUInt8(newSettings->unk21);
	}
	if (lowFlag & ROOM_LOW_FRIENDLYFIRE) {
		msg->WriteUInt8(newSettings->friendlyFire);
	}
	if (lowFlag & ROOM_LOW_FLASHLIGHT) {
		msg->WriteUInt8(newSettings->flashlight);
	}
	if (lowFlag & ROOM_LOW_FOOTSTEPS) {
		msg->WriteUInt8(newSettings->footsteps);
	}
	if (lowFlag & ROOM_LOW_UNK25) {
		msg->WriteUInt8(newSettings->unk25);
	}
	if (lowFlag & ROOM_LOW_TKPUNISH) {
		msg->WriteUInt8(newSettings->tkPunish);
	}
	if (lowFlag & ROOM_LOW_AUTOKICK) {
		msg->WriteUInt8(newSettings->autoKick);
	}
	if (lowFlag & ROOM_LOW_UNK28) {
		msg->WriteUInt8(newSettings->unk28);
	}
	if (lowFlag & ROOM_LOW_UNK29) {
		msg->WriteUInt8(newSettings->unk29);
	}
	if (lowFlag & ROOM_LOW_VIEWFLAG) {
		msg->WriteUInt8(newSettings->viewFlag);
	}
	if (lowFlag & ROOM_LOW_VOICECHAT) {
		msg->WriteUInt8(newSettings->voiceChat);
	}
	if (lowFlag & ROOM_LOW_STATUS) {
		msg->WriteUInt8(newSettings->status);
	}
	if (lowFlag & ROOM_LOW_UNK33) {
		msg->WriteUInt8(newSettings->unk33);
		if (newSettings->unk33_vec.size() == 2)
		{
			for (int i = 0; i < 2; i++)
			{
				msg->WriteUInt32(newSettings->unk33_vec[i].unk1);
				msg->WriteUInt32(newSettings->unk33_vec[i].unk2);
				msg->WriteUInt8(newSettings->unk33_vec[i].unk3);
				msg->WriteUInt16(newSettings->unk33_vec[i].unk4);
				msg->WriteUInt8(newSettings->unk33_vec[i].unk5);
				msg->WriteUInt8(newSettings->unk33_vec[i].unk6);
				msg->WriteUInt16(newSettings->unk33_vec[i].unk7);
				msg->WriteUInt8(newSettings->unk33_vec[i].unk8);
				msg->WriteUInt8(newSettings->unk33_vec[i].unk9);
			}
		}
		else
		{
			for (int i = 0; i < 2; i++)
			{
				msg->WriteUInt32(0);
				msg->WriteUInt32(0);
				msg->WriteUInt8(0);
				msg->WriteUInt16(0);
				msg->WriteUInt8(0);
				msg->WriteUInt8(0);
				msg->WriteUInt16(0);
				msg->WriteUInt8(0);
				msg->WriteUInt8(0);
			}
		}
	}

	if (lowMidFlag & ROOM_LOWMID_UNK34) {
		msg->WriteUInt32(newSettings->unk34);
		msg->WriteString(newSettings->unk35);
		msg->WriteUInt8(newSettings->unk36);
		msg->WriteUInt8(newSettings->unk37);
		msg->WriteUInt8(newSettings->unk38);
	}
	if (lowMidFlag & ROOM_LOWMID_C4TIMER) {
		msg->WriteUInt8(newSettings->c4Timer);
	}
	if (lowMidFlag & ROOM_LOWMID_BOT) {
		msg->WriteUInt8(newSettings->botDifficulty);
		msg->WriteUInt8(newSettings->friendlyBots);
		msg->WriteUInt8(newSettings->enemyBots);
		msg->WriteUInt8(newSettings->botBalance);
		msg->WriteUInt8(newSettings->botAdd);
	}
	if (lowMidFlag & ROOM_LOWMID_KDRULE) {
		msg->WriteUInt8(newSettings->kdRule);
	}
	if (lowMidFlag & ROOM_LOWMID_STARTINGCASH) {
		msg->WriteUInt16(newSettings->startingCash);
	}
	if (lowMidFlag & ROOM_LOWMID_MOVINGSHOT) {
		msg->WriteUInt8(newSettings->movingShot);
	}
	if (lowMidFlag & ROOM_LOWMID_BALLNUMBER) {
		msg->WriteUInt8(newSettings->ballNumber);
	}
	if (lowMidFlag & ROOM_LOWMID_STATUSSYMBOL) {
		msg->WriteUInt8(newSettings->statusSymbol); // color
	}
	if (lowMidFlag & ROOM_LOWMID_RANDOMMAP) {
		msg->WriteUInt8(newSettings->randomMap);
	}
	if (lowMidFlag & ROOM_LOWMID_MAPPLAYLIST) {
		msg->WriteUInt8(newSettings->mapPlaylistSize);
		for (size_t i = 0; i < newSettings->mapPlaylistSize; i++)
		{
			msg->WriteUInt8(newSettings->mapPlaylist[i].unk1);
			msg->WriteUInt16(newSettings->mapPlaylist[i].mapId);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_MAPPLAYLISTINDEX) {
		msg->WriteUInt8(newSettings->mapPlaylistIndex);
	}
	if (lowMidFlag & ROOM_LOWMID_ENHANCERESTRICT) {
		msg->WriteUInt8(newSettings->enhanceRestrict);
	}
	if (lowMidFlag & ROOM_LOWMID_SD) {
		msg->WriteUInt8(newSettings->sd);
	}
	if (lowMidFlag & ROOM_LOWMID_ZSDIFFICULTY) {
		msg->WriteUInt8(newSettings->zsDifficulty);
		msg->WriteUInt32(newSettings->unk56);
		msg->WriteUInt32(newSettings->unk57);
	}
	if (lowMidFlag & ROOM_LOWMID_LEAGUERULE) {
		msg->WriteUInt8(newSettings->leagueRule);
	}
	if (lowMidFlag & ROOM_LOWMID_MANNERLIMIT) {
		msg->WriteUInt8(newSettings->mannerLimit);
	}
	if (lowMidFlag & ROOM_LOWMID_MAPID2) {
		msg->WriteUInt16(newSettings->mapId2);
	}
	if (lowMidFlag & ROOM_LOWMID_ZBLIMIT) {
		msg->WriteUInt8(newSettings->zbLimitFlag);
		if (newSettings->zbLimit.size() == 4)
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt32(newSettings->zbLimit[i]);
			}
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt32(0);
			}
		}
	}
	if (lowMidFlag & ROOM_LOWMID_VOXEL) {
		msg->WriteUInt32(newSettings->voxelFlag);
		if (newSettings->voxelFlag & VOXELFLAG_ID) {
			msg->WriteString(newSettings->voxel_id);
		}
		if (newSettings->voxelFlag & VOXELFLAG_RESOURCEID) {
			msg->WriteString(newSettings->voxel_resource_id);
		}
		if (newSettings->voxelFlag & VOXELFLAG_RESOURCEMAXPLAYER) {
			msg->WriteUInt8(newSettings->voxel_resource_max_player);
		}
		if (newSettings->voxelFlag & VOXELFLAG_TITLE) {
			msg->WriteString(newSettings->voxel_title);
		}
		if (newSettings->voxelFlag & VOXELFLAG_RESOURCEMODE) {
			msg->WriteUInt8(newSettings->voxel_resource_mode);
		}
		if (newSettings->voxelFlag & VOXELFLAG_PERMISSION) {
			msg->WriteUInt8(newSettings->voxel_permission);
		}
		if (newSettings->voxelFlag & VOXELFLAG_DESCRIPTION) {
			msg->WriteString(newSettings->voxel_description);
		}
		if (newSettings->voxelFlag & VOXELFLAG_PARENTSSLOTID) {
			msg->WriteString(newSettings->voxel_parents_slot_id);
		}
		if (newSettings->voxelFlag & VOXELFLAG_IMAGEID) {
			msg->WriteString(newSettings->voxel_image_id);
		}
		if (newSettings->voxelFlag & VOXELFLAG_CREATORNICKNAME) {
			msg->WriteString(newSettings->voxel_creator_nickname);
		}
		if (newSettings->voxelFlag & VOXELFLAG_CREATORUSERNAME) {
			msg->WriteString(newSettings->voxel_creator_username);
		}
		if (newSettings->voxelFlag & VOXELFLAG_LIKECOUNT) {
			msg->WriteUInt32(newSettings->voxel_like_count);
		}
		if (newSettings->voxelFlag & VOXELFLAG_PLAYCOUNT) {
			msg->WriteUInt32(newSettings->voxel_play_count);
		}
		if (newSettings->voxelFlag & VOXELFLAG_BOOKMARKCOUNT) {
			msg->WriteUInt32(newSettings->voxel_bookmark_count);
		}
		if (newSettings->voxelFlag & VOXELFLAG_UNK15) {
			msg->WriteUInt32(newSettings->voxel_unk15_size);
			for (int i = 0; i < newSettings->voxel_unk15_size; i++)
			{
				msg->WriteUInt32(newSettings->voxel_unk15_vec[i].unk1);
				msg->WriteString(newSettings->voxel_unk15_vec[i].unk2);
			}
		}
		if (newSettings->voxelFlag & VOXELFLAG_CUBECOUNT) {
			msg->WriteUInt32(newSettings->voxel_cube_count);
		}
		if (newSettings->voxelFlag & VOXELFLAG_UNK17) {
			msg->WriteUInt32(newSettings->voxel_unk17);
		}
		if (newSettings->voxelFlag & VOXELFLAG_UNK18) {
			msg->WriteUInt32(newSettings->voxel_unk18);
		}
		if (newSettings->voxelFlag & VOXELFLAG_SLOTCATEGORY) {
			msg->WriteUInt8(newSettings->voxel_slot_category);
		}
		if (newSettings->voxelFlag & VOXELFLAG_SANDBOXSCRIPT) {
			msg->WriteUInt8(newSettings->voxel_sandbox_script);
		}
		if (newSettings->voxelFlag & VOXELFLAG_SAVEGROUPID) {
			msg->WriteString(newSettings->voxel_savegroup_id);
		}
		if (newSettings->voxelFlag & VOXELFLAG_UNK22) {
			msg->WriteUInt8(newSettings->voxel_unk22);
		}
		if (newSettings->voxelFlag & VOXELFLAG_UNK23) {
			msg->WriteUInt8(newSettings->voxel_unk23);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_UNK63) {
		msg->WriteUInt8(newSettings->unk63);
		for (size_t i = 0; i < newSettings->unk63; i++)
		{
			msg->WriteUInt16(newSettings->unk63_vec[i]);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_UNK64) {
		msg->WriteUInt8(newSettings->unk64);
	}
	if (lowMidFlag & ROOM_LOWMID_TEAMSWITCH) {
		msg->WriteUInt8(newSettings->teamSwitch);
	}
	if (lowMidFlag & ROOM_LOWMID_ZBRESPAWN) {
		msg->WriteUInt8(newSettings->zbRespawn);
	}
	if (lowMidFlag & ROOM_LOWMID_ZBBALANCE) {
		msg->WriteUInt8(newSettings->zbBalance);
	}
	if (lowMidFlag & ROOM_LOWMID_GAMERULE) {
		msg->WriteUInt8(newSettings->gameRule);
	}
	if (lowMidFlag & ROOM_LOWMID_SUPERROOM) {
		msg->WriteUInt8(newSettings->superRoom);
	}
	if (lowMidFlag & ROOM_LOWMID_ISZBCOMPETITIVE) {
		msg->WriteUInt8(newSettings->isZbCompetitive);
	}
	if (lowMidFlag & ROOM_LOWMID_ZBAUTOHUNTING) {
		msg->WriteUInt8(newSettings->zbAutoHunting);
	}
	if (lowMidFlag & ROOM_LOWMID_INTEGRATEDTEAM) {
		msg->WriteUInt8(newSettings->integratedTeam);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK73) {
		msg->WriteUInt8(newSettings->unk73);
	}

	if (highMidFlag & ROOM_HIGHMID_FIREBOMB) {
		msg->WriteUInt8(newSettings->fireBomb);
	}
	if (highMidFlag & ROOM_HIGHMID_MUTATIONRESTRICT) {
		msg->WriteUInt8(newSettings->mutationRestrict);
		if (newSettings->mutationRestrictList.size() == 4)
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt8(newSettings->mutationRestrictList[i]);
			}
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt8(-1);
			}
		}
	}
	if (highMidFlag & ROOM_HIGHMID_MUTATIONLIMIT) {
		msg->WriteUInt8(newSettings->mutationLimit);
	}
	if (highMidFlag & ROOM_HIGHMID_FLOATINGDAMAGESKIN) {
		msg->WriteUInt8(newSettings->floatingDamageSkin);
	}
	if (highMidFlag & ROOM_HIGHMID_PLAYERONETEAM) {
		msg->WriteUInt8(newSettings->playerOneTeam);
	}
	if (highMidFlag & ROOM_HIGHMID_WEAPONRESTRICT) {
		msg->WriteUInt8(newSettings->weaponRestrict);
	}
	if (highMidFlag & ROOM_HIGHMID_FAMILYBATTLE) {
		msg->WriteUInt8(newSettings->familyBattle);
	}
	if (highMidFlag & ROOM_HIGHMID_WEAPONBUYCOOLTIME) {
		msg->WriteUInt8(newSettings->weaponBuyCoolTime);
	}

	if (highFlag & ROOM_HIGH_UNK77) {
		msg->WriteUInt8(newSettings->unk77);
	}
}

void CPacketManager::SendRoomCreateAndJoin(IExtendedSocket* socket, IRoom* roomInfo)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::CreateAndJoin);

	msg->WriteUInt8(0);
	msg->WriteUInt32(roomInfo->GetID());
	msg->WriteUInt32(roomInfo->GetHostUser()->GetID());
	msg->WriteUInt16(0xB5);
	msg->WriteUInt8(0xFF);

	CRoomSettings* roomSettings = roomInfo->GetSettings();
	WriteSettings(msg, roomInfo->GetSettings(), roomSettings->lowFlag, roomSettings->lowMidFlag, roomSettings->highMidFlag, roomSettings->highFlag);

	msg->WriteUInt8(roomInfo->GetUsers().size());
	for (auto user : roomInfo->GetUsers())
	{
		UserNetworkConfig_s network = user->GetNetworkConfig();

		msg->WriteUInt32(user->GetID());
		msg->WriteUInt32(0);
		msg->WriteString(user->GetUsername());

		// user network info
		msg->WriteUInt8(user->GetRoomData()->m_Team);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
		msg->WriteUInt16(network.m_nExternalClientPort);
		msg->WriteUInt16(network.m_nExternalServerPort);
		msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
		msg->WriteUInt16(network.m_nLocalClientPort);
		msg->WriteUInt16(network.m_nLocalServerPort);

		CUserCharacter character = user->GetCharacter(UFLAG_LOW_ALL, UFLAG_HIGH_ALL);

		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerJoin(IExtendedSocket* socket, IUser* user, RoomTeamNum num)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::PlayerJoin);

	msg->WriteUInt32(user->GetID());
	msg->WriteUInt32(0);
	msg->WriteString(user->GetUsername());

	UserNetworkConfig_s network = user->GetNetworkConfig();

	// user network info
	msg->WriteUInt8(num);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
	msg->WriteUInt16(network.m_nExternalClientPort);
	msg->WriteUInt16(network.m_nExternalServerPort);
	msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
	msg->WriteUInt16(network.m_nLocalClientPort);
	msg->WriteUInt16(network.m_nLocalServerPort);

	CUserCharacter character = user->GetCharacter(UFLAG_LOW_ALL, UFLAG_HIGH_ALL);

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendRoomUpdateSettings(IExtendedSocket* socket, CRoomSettings* newSettings, int low, int lowMid, int highMid, int high)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::UpdateSettings);

	WriteSettings(msg, newSettings, low, lowMid, highMid, high);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetUserTeam(IExtendedSocket* socket, IUser* user, int teamNum)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::SetUserTeam);

	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(teamNum);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetPlayerReady(IExtendedSocket* socket, IUser* user, RoomReadyStatus readyStatus)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(readyStatus);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetHost(IExtendedSocket* socket, IUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::SetHost);
	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerLeave(IExtendedSocket* socket, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::PlayerLeave);
	msg->WriteUInt32(userId);

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerLeaveIngame(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::PlayerLeaveIngame);

	socket->Send(msg);
}

void CPacketManager::SendRoomInviteUserList(IExtendedSocket* socket, IUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::UserInviteList);

	CChannel* channel = user->GetCurrentChannel();
	msg->WriteUInt16(channel->GetUsers().size());

	for (auto u : channel->GetUsers())
	{
		msg->WriteUInt32(u->GetID());

		CUserCharacter character = u->GetCharacter(UFLAG_LOW_ALL, UFLAG_HIGH_ALL);

		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomGameResult(IExtendedSocket* socket, IRoom* room, CGameMatch* match)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::SetGameResult);

	int winTeam = 0;
	if (match->m_nCtWinCount > match->m_nTerWinCount)
		winTeam = 2;
	else
		winTeam = 1;

	msg->WriteUInt8(winTeam);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt8(match->m_UserStats.size());
	msg->WriteUInt8(room->GetSettings()->gameModeId);

	for (auto stat : match->m_UserStats)
	{
		IUser* user = stat->m_pUser;

		//int totalExp = stat->m_nExpEarned + stat->m_nBonusExpEarned + uData->exp;

		msg->WriteUInt32(user->GetID());
		msg->WriteUInt8(room->GetUserTeam(user));
		msg->WriteInt32(stat->m_nKills);
		msg->WriteUInt16(stat->m_nDeaths);
		msg->WriteUInt8(0); // win
		msg->WriteUInt8(0); // lose
		msg->WriteUInt16(stat->m_nExpEarned);
		msg->WriteUInt32(stat->m_nBonusExpEarned);
		msg->WriteUInt16(stat->m_nPointsEarned);
		msg->WriteUInt32(stat->m_nBonusPointsEarned);
		msg->WriteUInt8(match->m_nFirstPlaceUserId == user->GetID()); // is first place
		msg->WriteUInt8(0/*user->CheckForLvlUp(totalExp)*/); // is level up
		msg->WriteUInt16(0); // other bonus points
		msg->WriteUInt16(stat->m_nItemBonusPoints);
		msg->WriteUInt16(stat->m_nClassBonusPoints);
		msg->WriteUInt16(0); // event bonus points
		msg->WriteUInt16(0); // accessories bonus points
		msg->WriteUInt16(0); // team/clan bonus points
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0); // other bonus exp
		msg->WriteUInt16(stat->m_nItemBonusExp);
		msg->WriteUInt16(stat->m_nClassBonusPoints);
		msg->WriteUInt16(0); // event bonus exp
		msg->WriteUInt16(0); // accessories bonus exp
		msg->WriteUInt16(0); // team/clan bonus exp
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt8(0); // kakaito huita sleva
		msg->WriteUInt8(0); // headshots
		msg->WriteUInt8(0); // frag kills
		msg->WriteUInt8(0); // knife kills

		switch (room->GetSettings()->gameModeId)
		{
		case 0:
		case 3:
		case 6:
		case 7:
		case 50:
			msg->WriteUInt8(0); // bombs defused
			msg->WriteUInt8(0); // targets ???
			msg->WriteUInt8(0); // hostages rescued
			msg->WriteUInt8(0); // escaped as VIP
			msg->WriteUInt8(0); // killed VIP
			break;
		case 8:
		case 9:
		case 14:
		case 20:
		case 24:
		case 32:
		case 35:
		case 36:
		case 45:
		case 54:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 10:
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 11:
		case 13:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 12:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			break;
		case 15:
		case 17:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			break;
		case 16:
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 18:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 21:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			break;
		case 23:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			break;
		case 25:
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			break;
		case 26:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 27:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 28:
		case 52:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 29:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 30:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 33:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			break;
		case 37:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			break;
		case 38:
		case 39:
			msg->WriteUInt32(0);
			break;
		case 42:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 43:
		case 44:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 46:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 47:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 49:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 51:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 56:
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		}

		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomKick(IExtendedSocket* socket, int userID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::KickUser);

	msg->WriteUInt32(userID);

	socket->Send(msg);
}

void CPacketManager::SendRoomInitiateVoteKick(IExtendedSocket* socket, int userID, int destUserID, int reason)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::InitiateVoteKick);

	msg->WriteUInt32(userID);
	msg->WriteUInt32(destUserID);
	msg->WriteUInt8(reason);

	socket->Send(msg);
}

void CPacketManager::SendRoomVoteKickResult(IExtendedSocket* socket, bool kick, int userID, int reason)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::VoteKickResult);

	msg->WriteUInt8(kick);
	if (kick && kick != 1)
	{
		msg->WriteString("UNK STR");
	}
	else
	{
		msg->WriteUInt32(userID); // userID
		msg->WriteUInt8(reason); // reason
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomWeaponSurvey(IExtendedSocket* socket, const vector<int>& weapons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::WeaponSurvey);

	msg->WriteUInt8(weapons.size());
	for (auto weaponID : weapons)
	{
		msg->WriteUInt16(weaponID);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomKickClan(IExtendedSocket* socket, const vector<IUser*>& kickedUsers)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::KickClan);

	msg->WriteUInt8(kickedUsers.size());
	for (auto user : kickedUsers)
	{
		msg->WriteUInt32(user->GetID());
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomUnk32(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(32);

	msg->WriteUInt16(0);
	msg->WriteUInt16(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomUnk33(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(33);

	msg->WriteUInt16(0);
	msg->WriteUInt16(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
		msg->WriteUInt16(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelRoomList(IExtendedSocket* socket, const vector<IRoom*>& rooms)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomType::VoxelRoomList);

	msg->WriteUInt8(rooms.size());
	for (auto room : rooms)
	{
		BuildRoomInfo(msg, room, RLFLAG_ALL, RLHFLAG_ALL);
	}

	socket->Send(msg);
}

void CPacketManager::SendDefaultItems(IExtendedSocket* socket, const vector<CUserInventoryItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::DefaultItems);
	msg->BuildHeader();
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(item.m_nSlot);
		msg->WriteUInt8(1); // flag
		if (1)
		{
			msg->WriteUInt16(item.m_nItemID);
			msg->WriteUInt16(item.m_nCount);
			msg->WriteUInt8(item.m_nStatus);
			msg->WriteUInt8(item.m_nInUse);
			msg->WriteUInt32(item.m_nObtainDate);
			msg->WriteUInt32(item.m_nExpiryDate);

			msg->WriteUInt16(item.m_nPaintID);
			msg->WriteUInt16(item.m_nPaintIDList.size());
			for (auto paintID : item.m_nPaintIDList)
			{
				msg->WriteUInt16(paintID);
			}

			msg->WriteUInt16(item.m_nEnhancementLevel);
			msg->WriteUInt32(item.m_nEnhancementExp);
			msg->WriteUInt32(item.m_nEnhanceValue);

			msg->WriteUInt8(3); // can be disassembled flag
			msg->WriteUInt32(0); // itemID or timestamp

			msg->WriteUInt8(item.GetPartCount());
			if (item.m_nPartSlot1)
			{
				msg->WriteUInt8(0);
				msg->WriteUInt16(item.m_nPartSlot1);
			}
			if (item.m_nPartSlot2)
			{
				msg->WriteUInt8(1);
				msg->WriteUInt16(item.m_nPartSlot2);
			}

			msg->WriteUInt8(item.m_nInUse);

			// unk shit
			msg->WriteUInt8(0); 
			msg->WriteUInt8(item.m_nLockStatus); // locked item

			msg->WriteUInt32(0); // unk
			msg->WriteUInt8(0); // unk array size
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(i++);
				msg->WriteUInt16(0);
			}
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendHostOnItemUse(IExtendedSocket* socket, int userId, int itemId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::UseScenItem);
	msg->WriteUInt32(userId);
	msg->WriteUInt16(itemId);
	msg->WriteInt8(-1);
	socket->Send(msg);
}

void CPacketManager::SendHostServerJoin(IExtendedSocket* socket, int ipAddress, int port, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::HostServerJoin);
	msg->WriteUInt32(ipAddress, false);
	msg->WriteUInt16(port);
	msg->WriteUInt64(userId);
	socket->Send(msg);
}

void CPacketManager::SendHostStop(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::HostStop);
	socket->Send(msg);
}

void CPacketManager::SendHostLeaveResultWindow(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::LeaveResultWindow);
	socket->Send(msg);
}

void CPacketManager::SendHostUserInventory(IExtendedSocket* socket, int userId, const vector<CUserInventoryItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::SetInventory);
	msg->WriteUInt32(userId);

	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(item.m_nItemID);
		msg->WriteUInt8(0); // что это?
		msg->WriteUInt16(item.m_nCount);
		msg->WriteUInt16(item.m_nPaintID);
		msg->WriteUInt16(item.m_nEnhancementLevel);
		msg->WriteUInt32(item.m_nEnhanceValue);
		msg->WriteUInt8(item.GetPartCount());

		if (item.m_nPartSlot1)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt16(item.m_nPartSlot1);
		}
		if (item.m_nPartSlot2)
		{
			msg->WriteUInt8(1);
			msg->WriteUInt16(item.m_nPartSlot2);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendHostGameStart(IExtendedSocket* socket, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::GameStart);
	msg->WriteUInt32(userId);
	msg->WriteUInt8(0); // server category /// @todo investigate
	msg->WriteUInt8(0); // enable nexon analytics(it write every step on the map like kill event etc)
	msg->WriteUInt64(5555); // unk

	socket->Send(msg);
}

void CPacketManager::SendHostZBAddon(IExtendedSocket* socket, int userID, const vector<int>& addons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::SetZBAddons);

	msg->WriteUInt32(userID);
	msg->WriteUInt16(addons.size());
	for (auto addonID : addons)
	{
		msg->WriteUInt16(addonID);
	}

	socket->Send(msg);
}

void CPacketManager::SendHostJoin(IExtendedSocket* socket, IUser* host)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::HostJoin);
	msg->WriteUInt32(host->GetID());
	msg->WriteUInt64(0); // что это?

	UserNetworkConfig_s network = host->GetNetworkConfig();

	msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
	msg->WriteUInt16(network.m_nExternalClientPort);
	msg->WriteUInt16(network.m_nExternalServerPort);
	msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
	msg->WriteUInt16(network.m_nLocalClientPort);
	msg->WriteUInt16(network.m_nLocalServerPort);

	socket->Send(msg);
}

void CPacketManager::SendHostFlyerFlock(IExtendedSocket* socket, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::FlyerFlock);
	if (type == 1)
		msg->WriteString(OBFUSCATE("mosquito"));
	else if (type == 2)
		msg->WriteString(OBFUSCATE("kite"));
	else
		msg->WriteString(OBFUSCATE("unknown"));

	msg->WriteUInt8(type ? 1 : 0); // active

	socket->Send(msg);
}

void CPacketManager::SendHostAdBalloon(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::AdBalloon);
	// to reverse
	msg->WriteUInt32(0); // userID?
	msg->WriteUInt16(0);

	socket->Send(msg);
}

void CPacketManager::SendHostRestart(IExtendedSocket* socket, int newHostUserID, bool host, CGameMatch* match)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::HostRestart);
	msg->WriteUInt32(newHostUserID);

	if (host)
	{
		//vector<unsigned char>& saveData = match->GetSaveData();
		vector<unsigned char> saveData = {};
		msg->WriteUInt16(saveData.size());
		msg->WriteData(saveData.data(), saveData.size());

		msg->WriteUInt8(match->m_UserStats.size());
		for (auto userStat : match->m_UserStats)
		{
			msg->WriteUInt32(userStat->m_pUser->GetID());
		}
	}
	else
	{
		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendCharacter(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Character);
	msg->BuildHeader();
	socket->Send(msg);
}

void CPacketManager::SendEventAdd(IExtendedSocket* socket, int eventsFlag)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(1);
	msg->WriteUInt32(eventsFlag);
	socket->Send(msg);
}

void CPacketManager::SendEventUnk(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	socket->Send(msg);
}

void CPacketManager::SendEventMainMenuSkin(IExtendedSocket* socket, int skin)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(3);
	msg->WriteUInt32(skin); // 5 - christmas, 6 - halloween, 7 - halloween + snow, 8 - easter bunny
	socket->Send(msg);
}

void CPacketManager::SendMiniGameBingoUpdate(IExtendedSocket* socket, const UserBingo& bingo, const vector<UserBingoSlot>& slots, const vector<UserBingoPrizeSlot>& prizes)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(0); // bingo
	msg->WriteUInt8(0); // update desk
	msg->WriteUInt8(slots.size());
	for (const auto &slot : slots)
	{
		msg->WriteUInt8(slot.number);
		msg->WriteUInt8(slot.opened);
	}
	msg->WriteUInt8(prizes.size());
	for (const auto &prize : prizes)
	{
		msg->WriteUInt16(prize.item.itemID);
		msg->WriteUInt8(prize.item.count);
		msg->WriteUInt8(prize.item.duration);
		msg->WriteUInt8(prize.opened);
	}

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseUpdate(IExtendedSocket* socket, const WeaponReleaseConfig& cfg, const vector<UserWeaponReleaseRow>& rows, const vector<UserWeaponReleaseCharacter>& characters, int totalCount)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(65); // update

	msg->WriteUInt8(1); // game status(1 - active, 2 - event ended)
	msg->WriteUInt8(cfg.rows.size());
	for (auto& row : cfg.rows)
	{
		auto rowIt = find_if(rows.begin(), rows.end(),
			[row](const UserWeaponReleaseRow& progressRow) { return progressRow.id == row.item.itemID; });

		msg->WriteUInt16(row.item.itemID);
		msg->WriteUInt8(row.item.count);
		msg->WriteUInt8(row.item.duration);
		msg->WriteString(row.rowName);

		if (rowIt != rows.end())
		{
			msg->WriteUInt8(rowIt->progress);
			msg->WriteUInt8(rowIt->opened);
		}
		else
		{
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
		}
	}
	msg->WriteUInt8(cfg.characters.size());
	for (auto character : cfg.characters)
	{
		msg->WriteUInt8(character);

		auto characterIt = find_if(characters.begin(), characters.end(),
			[character](const UserWeaponReleaseCharacter& progressCharacter) { return progressCharacter.character == character; });
		if (characterIt != characters.end())
		{
			msg->WriteUInt8(characterIt->count);
		}
		else
		{
			msg->WriteUInt8(0);
		}
	}

	msg->WriteUInt16(totalCount);

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseSetCharacter(IExtendedSocket* socket, int status, int weaponSlot, int slot, int character, int charLeft)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(66);

	msg->WriteUInt8(status); // 0 - set character, 1 - grey button, 2 - set last character, 3 - CSO_Event_NotInProgress, 4 - CSO_WeaponRelease_No_Letter, 5 - CSO_WeaponRelease_Already_Use_Letter
	if (status <= 2)
	{
		msg->WriteUInt8(status == 2 ? 0 : 1); // row is not closed
		msg->WriteUInt8(weaponSlot);
		msg->WriteUInt8(slot);
		msg->WriteUInt8(character);
		msg->WriteUInt8(charLeft);
	}

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseUnk2(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(67);

	msg->WriteUInt8(0);
	msg->WriteUInt16(5);

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseIGNotice(IExtendedSocket* socket, char character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(68);

	msg->WriteUInt8(character);

	socket->Send(msg);
}

void CPacketManager::SendQuests(IExtendedSocket* socket, int userID, const vector<CQuest*>& quests, const vector<UserQuestProgress>& questsProgress, int infoFlag, int taskFlag, int rewardFlag, int statFlag)
{
	Logger().Warn("SendQuests TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateMainInfo(IExtendedSocket* socket, int flag, CQuest* quest, const UserQuestProgress& questProgress)
{
	Logger().Warn("SendQuestUpdateMainInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateTaskInfo(IExtendedSocket* socket, int flag, int questID, CQuestTask* task, const UserQuestTaskProgress& taskProgress)
{
	Logger().Warn("SendQuestUpdateTaskInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateRewardInfo(IExtendedSocket* socket, int flag, int questID, const QuestReward_s& reward)
{
	Logger().Warn("SendQuestUpdateRewardInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateQuestStat(IExtendedSocket* socket, int flag, int honorPoints, const UserQuestStat& stat)
{
	Logger().Warn("SendQuestUpdateQuestStat TODO: reverse\n");
}

void CPacketManager::SendFavoriteLoadout(IExtendedSocket* socket, int characterItemID, int currentLoadout, const vector<CUserLoadout>& loadouts)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetLoadout);
	msg->WriteUInt16(characterItemID);
	msg->WriteUInt8(currentLoadout);
	msg->WriteUInt8(LOADOUT_COUNT);
	msg->WriteUInt8(LOADOUT_SLOT_COUNT); // items in loadout

	for (int i = 0; i < LOADOUT_COUNT; i++)
	{
		if (i < loadouts.size())
		{
			for (auto item : loadouts[i].items)
			{
				msg->WriteUInt16(item);
			}
		}
		else
		{
			msg->WriteUInt16(12);
			msg->WriteUInt16(2);
			msg->WriteUInt16(161);
			msg->WriteUInt16(31);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteFastBuy(IExtendedSocket* socket, const vector<CUserFastBuy>& fastbuy)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetFastBuy);

	int i = 0;
	for (auto &subFastBuy : fastbuy)
	{
		msg->WriteUInt8(i++);

		msg->WriteString(subFastBuy.m_Name);

		for (auto item : subFastBuy.m_Items)
		{
			msg->WriteUInt16(item);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteBuyMenu(IExtendedSocket* socket, const vector<CUserBuyMenu>& buyMenu)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetBuyMenu);

	int i = 0;
	for (auto &subMenu : buyMenu)
	{
		msg->WriteUInt8(i++);

		for (auto item : subMenu.items)
		{
			msg->WriteUInt16(item);
		}

		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteBookmark(IExtendedSocket* socket, const vector<int>& bookmark)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetBookmark);

	msg->WriteUInt8(bookmark.size());
	for (auto itemID : bookmark)
	{
		msg->WriteUInt16(itemID);
	}

	socket->Send(msg);
}

unsigned char rawData[12011] = {
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4, 0x42,
	0xA9, 0x01, 0x00, 0x00, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x43,
	0x61, 0x6C, 0x65, 0x6E, 0x64, 0x61, 0x72, 0x20, 0x45, 0x76, 0x65, 0x6E,
	0x74, 0x00, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x64, 0x61, 0x69, 0x6C,
	0x79, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x64,
	0x3A, 0x0A, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x31, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x47, 0x65, 0x74,
	0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C,
	0x69, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C,
	0x79, 0x20, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x0A, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x32, 0x3A, 0x20, 0x43, 0x6C,
	0x69, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D, 0x69, 0x73, 0x73,
	0x69, 0x6F, 0x6E, 0x73, 0x20, 0x74, 0x61, 0x62, 0x20, 0x74, 0x6F, 0x20,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x0A,
	0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x3A, 0x20,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x66,
	0x72, 0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x68, 0x6F, 0x70,
	0x2E, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34,
	0x3A, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45, 0x78, 0x70, 0x6C,
	0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6F, 0x6E, 0x63, 0x65,
	0x20, 0x62, 0x79, 0x20, 0x63, 0x6C, 0x69, 0x63, 0x6B, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x20,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6F, 0x74, 0x74, 0x6F,
	0x6D, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C, 0x6F, 0x62,
	0x62, 0x79, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x2E, 0x0A, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x35, 0x3A, 0x20, 0x50,
	0x6C, 0x61, 0x79, 0x20, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x61, 0x6C,
	0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65,
	0x6E, 0x61, 0x72, 0x69, 0x6F, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x5A, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x69, 0x63, 0x2C, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x48, 0x65, 0x72, 0x6F, 0x2C, 0x20, 0x5A, 0x6F,
	0x6D, 0x62, 0x69, 0x65, 0x20, 0x45, 0x76, 0x6F, 0x6C, 0x75, 0x74, 0x69,
	0x6F, 0x6E, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43,
	0x6F, 0x6E, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2C, 0x20, 0x61, 0x6E, 0x64,
	0x20, 0x48, 0x69, 0x64, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x53, 0x65,
	0x65, 0x6B, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x31, 0x20, 0x74, 0x69,
	0x6D, 0x65, 0x2E, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x36, 0x3A, 0x20, 0x4C, 0x6F, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6F,
	0x6E, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E,
	0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x31, 0x20, 0x74, 0x68,
	0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x2E, 0x0A, 0x0A, 0x4F, 0x6E,
	0x6C, 0x79, 0x20, 0x72, 0x6F, 0x6F, 0x6D, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x33, 0x20, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20,
	0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0A, 0x43, 0x6F, 0x75, 0x6E,
	0x74, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F,
	0x20, 0x4D, 0x6F, 0x64, 0x65, 0x2E, 0x0A, 0x4E, 0x6F, 0x20, 0x6D, 0x6F,
	0x64, 0x65, 0x20, 0x6D, 0x69, 0x6E, 0x69, 0x6D, 0x75, 0x6D, 0x20, 0x70,
	0x6C, 0x61, 0x79, 0x20, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x2E, 0x0A, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x0A, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x62, 0x65,
	0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x72, 0x65, 0x67,
	0x61, 0x72, 0x64, 0x6C, 0x65, 0x73, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x6F,
	0x72, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65,
	0x74, 0x65, 0x64, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61, 0x74, 0x20,
	0x6D, 0x69, 0x64, 0x6E, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x0A, 0x4F, 0x6E,
	0x6C, 0x79, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6C, 0x61, 0x62, 0x6C,
	0x65, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x73,
	0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70,
	0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65,
	0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F,
	0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65, 0x72,
	0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x06,
	0x00, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x2C, 0x20,
	0x47, 0x65, 0x74, 0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75,
	0x70, 0x70, 0x6C, 0x69, 0x65, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x32, 0x2C, 0x20, 0x56, 0x69, 0x65, 0x77, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x2C, 0x20, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x57, 0x0A, 0x00, 0x00, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x2C, 0x20, 0x50, 0x72, 0x6F, 0x63,
	0x65, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x45, 0x78, 0x70,
	0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x21, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x35, 0x2C, 0x20, 0x43, 0x6F, 0x6D,
	0x70, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x74, 0x20, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x36, 0x2C, 0x20, 0x4C,
	0x6F, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6F, 0x6E, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
	0x69, 0x6E, 0x67, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73,
	0x20, 0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64,
	0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x05, 0x21, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE3, 0x25, 0xA9, 0x01, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32,
	0x31, 0x32, 0x31, 0x34, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x43, 0x61,
	0x6C, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x00, 0x01, 0x00, 0x00, 0xF4, 0xA5,
	0xA0, 0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x45, 0x78, 0x70, 0x6C,
	0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x69, 0x6C, 0x65,
	0x75, 0x70, 0x20, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x4D, 0x61, 0x79, 0x20, 0x74, 0x68,
	0x6F, 0x73, 0x65, 0x20, 0x77, 0x68, 0x6F, 0x20, 0x76, 0x69, 0x67, 0x6F,
	0x72, 0x6F, 0x75, 0x73, 0x6C, 0x79, 0x20, 0x65, 0x78, 0x70, 0x6C, 0x6F,
	0x72, 0x65, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x73, 0x2E, 0x0A, 0x0A, 0x46, 0x6F,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x66, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x20,
	0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2C,
	0x20, 0x79, 0x6F, 0x75, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6F,
	0x6E, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79,
	0x2E, 0x0A, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72,
	0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73,
	0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x57, 0x65, 0x61,
	0x70, 0x6F, 0x6E, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x31, 0x30, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x2E, 0x0A,
	0x0A, 0x2D, 0x20, 0x45, 0x41, 0x53, 0x59, 0x20, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x3A, 0x20, 0x31, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x0A, 0x2D, 0x20, 0x4E, 0x4F, 0x52, 0x4D, 0x41, 0x4C,
	0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x3A,
	0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x0A, 0x2D, 0x20,
	0x48, 0x41, 0x52, 0x44, 0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6C, 0x74, 0x79, 0x3A, 0x20, 0x34, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x0A, 0x0A, 0x2A, 0x20, 0x43, 0x61, 0x6E, 0x20, 0x65, 0x61, 0x72,
	0x6E, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x34, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79,
	0x2E, 0x0A, 0x2A, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6F,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x20, 0x66, 0x6F, 0x72, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x73, 0x2E, 0x00, 0x75, 0x72, 0x6C,
	0x00, 0x00, 0x02, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6F, 0x6E, 0x32, 0x31, 0x31, 0x31, 0x31, 0x38, 0x00, 0x02, 0x01, 0x00,
	0xD8, 0x6B, 0x8D, 0x01, 0xFC, 0x89, 0xE1, 0x01, 0x00, 0x00, 0x53, 0x65,
	0x61, 0x73, 0x6F, 0x6E, 0x20, 0x32, 0x20, 0x4E, 0x65, 0x77, 0x20, 0x4D,
	0x65, 0x64, 0x61, 0x6C, 0x20, 0x26, 0x20, 0x57, 0x65, 0x61, 0x70, 0x6F,
	0x6E, 0x20, 0x50, 0x61, 0x69, 0x6E, 0x74, 0x20, 0x47, 0x69, 0x76, 0x65,
	0x61, 0x77, 0x61, 0x79, 0x00, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77,
	0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x20,
	0x70, 0x61, 0x69, 0x6E, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20,
	0x75, 0x70, 0x6F, 0x6E, 0x20, 0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x69,
	0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D, 0x61, 0x64, 0x65, 0x20,
	0x69, 0x6E, 0x20, 0x48, 0x65, 0x61, 0x76, 0x65, 0x6E, 0x20, 0x6D, 0x65,
	0x64, 0x61, 0x6C, 0x0A, 0x0A, 0x48, 0x6F, 0x77, 0x20, 0x74, 0x6F, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D,
	0x65, 0x64, 0x61, 0x6C, 0x3A, 0x20, 0x48, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x6C, 0x6C, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6F, 0x6E, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x74, 0x65, 0x6D, 0x73, 0x20, 0x6C, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x65, 0x6C, 0x6F, 0x77, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x4B,
	0x61, 0x6C, 0x61, 0x65, 0x6C, 0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x65, 0x64,
	0x65, 0x61, 0x0A, 0x20, 0x2D, 0x20, 0x4B, 0x61, 0x6C, 0x61, 0x65, 0x6C,
	0x27, 0x73, 0x20, 0x57, 0x69, 0x6E, 0x67, 0x73, 0x0A, 0x20, 0x2D, 0x20,
	0x4D, 0x65, 0x64, 0x65, 0x61, 0x27, 0x73, 0x20, 0x57, 0x69, 0x6E, 0x67,
	0x73, 0x0A, 0x20, 0x2D, 0x20, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77,
	0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F,
	0x72, 0x64, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x42, 0x6C, 0x61, 0x64,
	0x65, 0x20, 0x52, 0x75, 0x6E, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6B, 0x65,
	0x72, 0x0A, 0x0A, 0x2A, 0x20, 0x43, 0x61, 0x6E, 0x20, 0x6F, 0x62, 0x74,
	0x61, 0x69, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E,
	0x74, 0x0A, 0x2A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x48, 0x6F, 0x6C, 0x79,
	0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E,
	0x65, 0x20, 0x4F, 0x72, 0x64, 0x65, 0x72, 0x20, 0x73, 0x6B, 0x69, 0x6E,
	0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x62, 0x65, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6E, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x6F, 0x6E, 0x6C, 0x79,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74,
	0x2C, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
	0x65, 0x64, 0x61, 0x6C, 0x20, 0x69, 0x73, 0x20, 0x6F, 0x62, 0x74, 0x61,
	0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F,
	0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79,
	0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73,
	0x2D, 0x6A, 0x75, 0x6C, 0x79, 0x2D, 0x31, 0x30, 0x2D, 0x32, 0x30, 0x31,
	0x39, 0x2F, 0x00, 0x00, 0x01, 0x00, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x20, 0x4F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x23, 0x20, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x31, 0x39, 0x30, 0x36, 0x31, 0x33, 0x5F,
	0x6D, 0x61, 0x64, 0x65, 0x5F, 0x69, 0x6E, 0x5F, 0x68, 0x65, 0x61, 0x76,
	0x65, 0x6E, 0x00, 0x03, 0x01, 0x00, 0x14, 0x4A, 0x91, 0x01, 0x94, 0x88,
	0xE1, 0x01, 0x00, 0x00, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x42,
	0x6F, 0x6E, 0x75, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20,
	0x64, 0x65, 0x70, 0x65, 0x6E, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x61, 0x63, 0x63, 0x75,
	0x6D, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x79, 0x6F, 0x75, 0x72,
	0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62,
	0x65, 0x72, 0x73, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x63,
	0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x46, 0x61,
	0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6F, 0x6E,
	0x6C, 0x69, 0x6E, 0x65, 0x2E, 0x20, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A,
	0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x70, 0x6E, 0x2D,
	0x6A, 0x61, 0x6E, 0x75, 0x61, 0x72, 0x79, 0x2D, 0x32, 0x2D, 0x32, 0x30,
	0x32, 0x30, 0x2F, 0x00, 0x00, 0x0A, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79,
	0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C,
	0x69, 0x6E, 0x65, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6E, 0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E,
	0x65, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,
	0xA8, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E,
	0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x00,
	0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x1F,
	0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20,
	0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65,
	0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0xB1, 0x1F, 0x00, 0x00,
	0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57,
	0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79,
	0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68,
	0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46,
	0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69,
	0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65,
	0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50,
	0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75,
	0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D,
	0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65,
	0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C,
	0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61,
	0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73,
	0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x69, 0x6E, 0x69, 0x6D, 0x75, 0x6D, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x6D, 0x69, 0x6E, 0x73, 0x29, 0x20,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72,
	0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x6C, 0x61,
	0x6E, 0x5F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x5F, 0x62, 0x6F, 0x6E,
	0x75, 0x73, 0x32, 0x00, 0x04, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4,
	0x42, 0xA9, 0x01, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x00, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20,
	0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x64,
	0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x74, 0x2E, 0x20, 0x43, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20,
	0x61, 0x63, 0x63, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x2E,
	0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x31, 0x20,
	0x70, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6F, 0x62,
	0x74, 0x61, 0x69, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x20, 0x62, 0x6F, 0x78, 0x20, 0x69,
	0x6E, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x35, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29,
	0x0A, 0x20, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x31, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x50, 0x54, 0x20, 0x28,
	0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D,
	0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x61, 0x63, 0x63,
	0x6F, 0x6D, 0x70, 0x6C, 0x69, 0x73, 0x68, 0x20, 0x32, 0x20, 0x4B, 0x69,
	0x6C, 0x6C, 0x73, 0x2C, 0x20, 0x36, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x32, 0x20, 0x48, 0x75, 0x6D,
	0x61, 0x6E, 0x20, 0x49, 0x6E, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E,
	0x73, 0x20, 0x28, 0x62, 0x6F, 0x74, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6C,
	0x75, 0x64, 0x65, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x7A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x28, 0x75, 0x70,
	0x20, 0x74, 0x6F, 0x20, 0x34, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D, 0x20,
	0x45, 0x61, 0x72, 0x6E, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x20, 0x66, 0x6F, 0x72, 0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x20, 0x5A,
	0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72,
	0x69, 0x6F, 0x20, 0x69, 0x6E, 0x20, 0x68, 0x61, 0x72, 0x64, 0x20, 0x6F,
	0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31,
	0x30, 0x30, 0x20, 0x6B, 0x69, 0x6C, 0x6C, 0x73, 0x20, 0x28, 0x75, 0x70,
	0x20, 0x74, 0x6F, 0x20, 0x34, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x00, 0x68, 0x74, 0x74,
	0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65,
	0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E,
	0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65,
	0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00,
	0x12, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73,
	0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64,
	0x61, 0x79, 0x27, 0x73, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69,
	0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61,
	0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x4B, 0x69,
	0x6C, 0x6C, 0x2F, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79,
	0x27, 0x73, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63,
	0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20,
	0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73,
	0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27,
	0x73, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x20, 0x42, 0x6F, 0x78,
	0x20, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x76, 0x20, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x74, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x02, 0x00, 0x32, 0x22, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x20, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xB4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x57, 0x0A, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x09, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x32, 0x22, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x01, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x21, 0x00,
	0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0x00,
	0x00, 0x02, 0x00, 0x80, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x21, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E,
	0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C,
	0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x01, 0x00, 0x00, 0x03, 0x00,
	0x32, 0x22, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E,
	0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C,
	0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x02, 0x00,
	0xD2, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x02, 0x00, 0x05, 0x21, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x25, 0xA9, 0x01, 0x00,
	0x4A, 0x22, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC2, 0x01, 0x00, 0x00, 0x03, 0x00, 0x32, 0x22, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x03, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x21, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xEF, 0x01, 0x00, 0x00, 0x02, 0x00, 0x77, 0x20, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x22, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00,
	0x00, 0x01, 0x00, 0x64, 0x20, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32,
	0x32, 0x31, 0x32, 0x30, 0x31, 0x5F, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x00, 0x05, 0x01, 0x00,
	0x94, 0xE1, 0x97, 0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x57, 0x61,
	0x69, 0x74, 0x21, 0x20, 0x54, 0x61, 0x6B, 0x65, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x20, 0x57, 0x65,
	0x61, 0x70, 0x6F, 0x6E, 0x00, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x32, 0x30, 0x2C, 0x20, 0x34, 0x30,
	0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x38, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x6C, 0x61, 0x79,
	0x20, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x0A,
	0x20, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20,
	0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79,
	0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20, 0x66,
	0x6F, 0x72, 0x20, 0x36, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65,
	0x73, 0x2E, 0x0A, 0x0A, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C,
	0x20, 0x49, 0x74, 0x65, 0x6D, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E,
	0x74, 0x73, 0x20, 0x28, 0x31, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20,
	0x61, 0x74, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x29, 0x0A, 0x0A,
	0x20, 0x2D, 0x20, 0x4C, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x69, 0x6E, 0x67,
	0x20, 0x46, 0x75, 0x72, 0x79, 0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x61, 0x67,
	0x6E, 0x75, 0x6D, 0x20, 0x4C, 0x61, 0x75, 0x6E, 0x63, 0x68, 0x65, 0x72,
	0x0A, 0x20, 0x2D, 0x20, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77, 0x6F,
	0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F, 0x72,
	0x64, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x69, 0x63, 0x20, 0x48, 0x61, 0x72, 0x6D, 0x6F, 0x6E, 0x69, 0x75, 0x6D,
	0x0A, 0x20, 0x2D, 0x20, 0x49, 0x6E, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x79,
	0x20, 0x4C, 0x61, 0x73, 0x65, 0x72, 0x20, 0x46, 0x69, 0x73, 0x74, 0x0A,
	0x20, 0x2D, 0x20, 0x58, 0x2D, 0x54, 0x52, 0x41, 0x43, 0x4B, 0x45, 0x52,
	0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75, 0x61, 0x6C, 0x20, 0x53, 0x77, 0x6F,
	0x72, 0x64, 0x20, 0x50, 0x68, 0x61, 0x6E, 0x74, 0x6F, 0x6D, 0x20, 0x53,
	0x6C, 0x61, 0x79, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75, 0x61,
	0x6C, 0x20, 0x42, 0x65, 0x72, 0x65, 0x74, 0x74, 0x61, 0x20, 0x47, 0x75,
	0x6E, 0x73, 0x6C, 0x69, 0x6E, 0x67, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20,
	0x42, 0x61, 0x72, 0x72, 0x65, 0x74, 0x74, 0x20, 0x4D, 0x39, 0x35, 0x20,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x20, 0x54, 0x69, 0x67, 0x65, 0x72, 0x0A,
	0x20, 0x2D, 0x20, 0x54, 0x72, 0x69, 0x6E, 0x69, 0x74, 0x79, 0x20, 0x47,
	0x72, 0x65, 0x6E, 0x61, 0x64, 0x65, 0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75,
	0x61, 0x6C, 0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x20, 0x49, 0x6E, 0x66,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x20, 0x48, 0x75, 0x6E, 0x74, 0x65, 0x72,
	0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x33, 0x20, 0x42, 0x6C, 0x61, 0x63, 0x6B,
	0x20, 0x44, 0x72, 0x61, 0x67, 0x6F, 0x6E, 0x0A, 0x0A, 0x20, 0x2A, 0x20,
	0x49, 0x74, 0x65, 0x6D, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6F, 0x6E, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x72, 0x73, 0x20, 0x63,
	0x6F, 0x75, 0x6E, 0x74, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x64, 0x6F,
	0x6E, 0x27, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6D,
	0x2E, 0x0A, 0x20, 0x2A, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6D, 0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x65, 0x78,
	0x74, 0x65, 0x6E, 0x64, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x36, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x2E, 0x0A, 0x20, 0x2A, 0x20, 0x4F, 0x6E, 0x6C,
	0x79, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x65,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x6D, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x34, 0x20, 0x6F, 0x72, 0x20, 0x6D,
	0x6F, 0x72, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20,
	0x63, 0x6F, 0x75, 0x6E, 0x74, 0x73, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70,
	0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x70, 0x6E,
	0x2D, 0x6F, 0x63, 0x74, 0x6F, 0x62, 0x65, 0x72, 0x2D, 0x32, 0x38, 0x2D,
	0x32, 0x30, 0x32, 0x30, 0x2F, 0x00, 0x00, 0x03, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D,
	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x30, 0x31, 0x30, 0x32, 0x38, 0x5F,
	0x72, 0x61, 0x6E, 0x64, 0x5F, 0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x5F,
	0x36, 0x30, 0x6D, 0x69, 0x6E, 0x00, 0x06, 0x01, 0x00, 0xB8, 0xF4, 0x9C,
	0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6F, 0x20, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B,
	0x61, 0x67, 0x65, 0x20, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x00, 0x55, 0x70, 0x6F, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69,
	0x6E, 0x67, 0x20, 0x33, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65,
	0x73, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x69, 0x6E, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x6F, 0x64,
	0x65, 0x2C, 0x0A, 0x79, 0x6F, 0x75, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x35, 0x20, 0x74, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73,
	0x2E, 0x0A, 0x0A, 0x2D, 0x20, 0x43, 0x68, 0x69, 0x6E, 0x61, 0x20, 0x54,
	0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
	0x0A, 0x2D, 0x20, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x20, 0x54, 0x68, 0x65,
	0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A, 0x2D,
	0x20, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x20, 0x54,
	0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
	0x0A, 0x20, 0x2D, 0x20, 0x53, 0x70, 0x61, 0x63, 0x65, 0x20, 0x54, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A,
	0x20, 0x2D, 0x20, 0x53, 0x6F, 0x63, 0x63, 0x65, 0x72, 0x20, 0x54, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x2A, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6D, 0x73, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x2E, 0x0A, 0x2A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x77, 0x69, 0x6C,
	0x6C, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x64, 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x61,
	0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x6F, 0x77, 0x6E, 0x2E, 0x0A,
	0x20, 0x53, 0x61, 0x6C, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x6D, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x62, 0x65,
	0x69, 0x6E, 0x67, 0x20, 0x73, 0x6F, 0x6C, 0x64, 0x20, 0x69, 0x6E, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x70, 0x20, 0x77, 0x69, 0x6C,
	0x6C, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x4A, 0x75, 0x6E, 0x65, 0x20, 0x33, 0x72, 0x64, 0x2E, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x47, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x1F, 0x00, 0x00, 0x01, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x1F, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA7, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xAD, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6F, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x50, 0x61, 0x63, 0x6B, 0x61,
	0x67, 0x65, 0x00, 0x07, 0x00, 0x00, 0xB8, 0x2F, 0x9E, 0x01, 0xA4, 0x87,
	0xE1, 0x01, 0x00, 0x00, 0x4E, 0x65, 0x77, 0x20, 0x5A, 0x6F, 0x6D, 0x62,
	0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x45,
	0x76, 0x65, 0x6E, 0x74, 0x00, 0x4E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6F, 0x20, 0x4D, 0x61, 0x70, 0x2C, 0x20, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x27, 0x73, 0x20, 0x4C, 0x6F,
	0x67, 0x20, 0x23, 0x30, 0x37, 0x3A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x0A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20, 0x75, 0x70, 0x6F, 0x6E, 0x20,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70,
	0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x0A, 0x0A, 0x20, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x3A, 0x20, 0x55, 0x6E, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x78, 0x31, 0x0A,
	0x0A, 0x20, 0x2A, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x63,
	0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20, 0x63,
	0x6C, 0x61, 0x69, 0x6D, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20,
	0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x70, 0x6E, 0x2D, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x2D,
	0x31, 0x31, 0x2D, 0x32, 0x30, 0x32, 0x31, 0x2F, 0x00, 0x00, 0x01, 0x00,
	0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69,
	0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x74, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x00, 0x74, 0x20, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x65, 0x76, 0x74, 0x32, 0x31, 0x30, 0x37, 0x32, 0x39, 0x5F, 0x7A, 0x73,
	0x5F, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x5F, 0x74, 0x75, 0x74, 0x6F,
	0x72, 0x69, 0x61, 0x6C, 0x5F, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x00, 0x08,
	0x00, 0x00, 0xF8, 0x07, 0xA4, 0x01, 0x54, 0x49, 0x13, 0x04, 0x00, 0x00,
	0x4E, 0x65, 0x77, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72,
	0x20, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x41, 0x74, 0x74,
	0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x45, 0x76, 0x65, 0x6E,
	0x74, 0x00, 0x53, 0x74, 0x61, 0x79, 0x20, 0x6C, 0x6F, 0x67, 0x67, 0x65,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x6F, 0x72, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x0A, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x6F, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2E,
	0x0A, 0x0A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F,
	0x72, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x4C, 0x6F, 0x67, 0x69,
	0x6E, 0x20, 0x44, 0x61, 0x79, 0x73, 0x0A, 0x0A, 0x31, 0x20, 0x44, 0x61,
	0x79, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x31, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x2C, 0x20, 0x31, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64,
	0x65, 0x72, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x35, 0x30, 0x30, 0x20, 0x4D,
	0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A, 0x0A, 0x32, 0x20, 0x44, 0x61,
	0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x32,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73,
	0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63,
	0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20, 0x32, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63,
	0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x31, 0x2C,
	0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x33, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C,
	0x65, 0x63, 0x74, 0x20, 0x33, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63,
	0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20,
	0x33, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A,
	0x6F, 0x72, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65,
	0x61, 0x67, 0x65, 0x0A, 0x0A, 0x34, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A,
	0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x34, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E,
	0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65,
	0x72, 0x73, 0x2C, 0x20, 0x34, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65,
	0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x33, 0x30, 0x30, 0x30, 0x20,
	0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A, 0x0A, 0x35, 0x20, 0x44,
	0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20,
	0x35, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E,
	0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20, 0x35, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x34,
	0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x36, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C,
	0x65, 0x63, 0x74, 0x20, 0x36, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63,
	0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20,
	0x36, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A,
	0x6F, 0x72, 0x20, 0x35, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65,
	0x61, 0x67, 0x65, 0x0A, 0x0A, 0x37, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A,
	0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x31, 0x30, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x73, 0x20, 0x2B, 0x20, 0x31, 0x30, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x0A, 0x2B, 0x20, 0x56, 0x49, 0x50,
	0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x28,
	0x32, 0x20, 0x44, 0x61, 0x79, 0x73, 0x29, 0x0A, 0x0A, 0x2A, 0x20, 0x43,
	0x6C, 0x61, 0x69, 0x6D, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x00, 0x75,
	0x72, 0x6C, 0x00, 0x00, 0x08, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20,
	0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x03, 0x01, 0x00, 0x20, 0x0A, 0x00, 0x00, 0x01, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32,
	0x32, 0x30, 0x34, 0x32, 0x31, 0x5F, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D,
	0x65, 0x4E, 0x65, 0x77, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x09,
	0x00, 0x00, 0xF4, 0x07, 0xA8, 0x01, 0xF4, 0x7D, 0xAA, 0x01, 0x00, 0x00,
	0x47, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x45, 0x61, 0x72,
	0x6E, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x72, 0x61, 0x63, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x75, 0x70, 0x20,
	0x47, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x6B, 0x69, 0x6C, 0x6C, 0x73, 0x2E, 0x0A, 0x2D, 0x20, 0x31,
	0x2C, 0x20, 0x32, 0x2C, 0x20, 0x33, 0x2C, 0x20, 0x35, 0x2C, 0x20, 0x37,
	0x2C, 0x20, 0x31, 0x30, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x0A, 0x0A,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x0A, 0x2D, 0x20, 0x53, 0x65,
	0x6C, 0x65, 0x63, 0x74, 0x20, 0x31, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20,
	0x61, 0x6D, 0x6F, 0x6E, 0x67, 0x3A, 0x20, 0x41, 0x64, 0x64, 0x2D, 0x4F,
	0x6E, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65,
	0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x57, 0x65, 0x61, 0x70, 0x6F,
	0x6E, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74,
	0x65, 0x65, 0x64, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E,
	0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x31, 0x30, 0x30, 0x20, 0x57, 0x65, 0x61,
	0x70, 0x6F, 0x6E, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x6D,
	0x65, 0x6E, 0x74, 0x20, 0x45, 0x58, 0x50, 0x20, 0x43, 0x6F, 0x75, 0x70,
	0x6F, 0x6E, 0x20, 0x78, 0x34, 0x2C, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x20, 0x34, 0x20, 0x50, 0x61, 0x72, 0x74, 0x73, 0x20, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x78, 0x31, 0x30, 0x2C,
	0x20, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C,
	0x65, 0x61, 0x67, 0x65, 0x20, 0x43, 0x6F, 0x75, 0x70, 0x6F, 0x6E, 0x0A,
	0x0A, 0x2A, 0x45, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x65, 0x64, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x6B, 0x69, 0x6C,
	0x6C, 0x20, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x6F, 0x6E, 0x63, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74,
	0x2E, 0x0A, 0x2A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x63,
	0x6C, 0x61, 0x69, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E,
	0x74, 0x2E, 0x0A, 0x2A, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x6B, 0x69, 0x6C, 0x6C, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x33,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79, 0x2E, 0x0A, 0x2A, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61,
	0x6E, 0x63, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73, 0x70, 0x61, 0x77, 0x6E,
	0x20, 0x69, 0x6E, 0x20, 0x4E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x20, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x20, 0x6F, 0x72,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x33, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2E,
	0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E,
	0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F,
	0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E, 0x6F, 0x76,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x32, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x07, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x4D,
	0x61, 0x78, 0x69, 0x6D, 0x75, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x5F, 0x6B,
	0x69, 0x6C, 0x6C, 0x5F, 0x67, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x5F, 0x7A,
	0x6F, 0x6D, 0x62, 0x69, 0x65, 0x5F, 0x32, 0x32, 0x31, 0x30, 0x32, 0x30,
	0x00, 0x0A, 0x00, 0x00, 0x74, 0xA5, 0xA8, 0x01, 0x03, 0x42, 0xA9, 0x01,
	0x00, 0x00, 0x45, 0x78, 0x74, 0x72, 0x61, 0x20, 0x46, 0x72, 0x65, 0x65,
	0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x20, 0x2D, 0x20,
	0x45, 0x61, 0x72, 0x6E, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6F,
	0x6E, 0x61, 0x6C, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20,
	0x62, 0x79, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x61, 0x74, 0x74,
	0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20,
	0x46, 0x72, 0x65, 0x65, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2E, 0x0A, 0x0A, 0x2D, 0x20, 0x35,
	0x20, 0x64, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64,
	0x61, 0x6E, 0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20,
	0x42, 0x6F, 0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x31, 0x30, 0x20,
	0x64, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61,
	0x6E, 0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42,
	0x6F, 0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x31, 0x35, 0x20, 0x64,
	0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E,
	0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F,
	0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x32, 0x30, 0x20, 0x64, 0x61,
	0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63,
	0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78,
	0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x32, 0x35, 0x20, 0x64, 0x61, 0x79,
	0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65,
	0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20,
	0x78, 0x31, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77,
	0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E,
	0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E,
	0x6F, 0x76, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33, 0x30, 0x2D, 0x32,
	0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x05, 0x00, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x30, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x74,
	0x74, 0x6C, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x5F, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x00, 0x0B, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01,
	0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x45, 0x76,
	0x65, 0x6E, 0x74, 0x00, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x77, 0x69,
	0x6C, 0x6C, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6D,
	0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20,
	0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C, 0x61, 0x62, 0x6F, 0x72,
	0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x64,
	0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x74, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73,
	0x20, 0x6F, 0x66, 0x20, 0x50, 0x54, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20,
	0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x4C, 0x61,
	0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x73, 0x65, 0x20, 0x73, 0x6B, 0x69,
	0x6C, 0x6C, 0x73, 0x20, 0x33, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x69, 0x6E, 0x20, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72,
	0x79, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x0A, 0x20, 0x2D, 0x20, 0x4F, 0x6E,
	0x63, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x6D, 0x65, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73,
	0x3A, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x31, 0x20, 0x45, 0x76,
	0x65, 0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x0A,
	0x0A, 0x20, 0x2A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20,
	0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x0A, 0x20, 0x2A, 0x20,
	0x43, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63,
	0x63, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x0A, 0x2A,
	0x20, 0x43, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x75, 0x74, 0x6F, 0x20, 0x68, 0x75, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x2E,
	0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E,
	0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F,
	0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32,
	0x32, 0x2F, 0x00, 0x00, 0x02, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74,
	0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x53, 0x6B, 0x69, 0x6C, 0x6C, 0x20, 0x55, 0x73, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x03, 0x01, 0x00, 0x05, 0x21, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xE3, 0x25, 0xA9, 0x01, 0x00, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6E, 0x63, 0x65, 0x4C, 0x61, 0x62, 0x4D, 0x6F, 0x64, 0x65,
	0x5F, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x00, 0x0C, 0x00,
	0x00, 0x74, 0xA5, 0xA8, 0x01, 0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x54, 0x72,
	0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20,
	0x52, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x47, 0x72, 0x6F,
	0x75, 0x70, 0x20, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x20,
	0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x31, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65,
	0x65, 0x64, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E,
	0x74, 0x2E, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63,
	0x74, 0x20, 0x6F, 0x6E, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x66,
	0x6F, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x33, 0x30, 0x30,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x0A, 0x20, 0x2D, 0x20, 0x4E, 0x45, 0x47, 0x45, 0x56,
	0x20, 0x4E, 0x47, 0x2D, 0x37, 0x20, 0x41, 0x6A, 0x61, 0x78, 0x2C, 0x20,
	0x53, 0x70, 0x65, 0x6C, 0x6C, 0x20, 0x4C, 0x61, 0x6E, 0x63, 0x65, 0x20,
	0x53, 0x63, 0x61, 0x72, 0x6C, 0x65, 0x74, 0x20, 0x52, 0x6F, 0x73, 0x65,
	0x2C, 0x20, 0x50, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x20, 0x48, 0x61,
	0x72, 0x6D, 0x6F, 0x6E, 0x69, 0x75, 0x6D, 0x2C, 0x20, 0x4C, 0x69, 0x67,
	0x68, 0x74, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x46, 0x75, 0x72, 0x79, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E, 0x6F, 0x76, 0x65,
	0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33, 0x30, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x01, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32, 0x31,
	0x31, 0x31, 0x37, 0x5F, 0x54, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72,
	0x00, 0x0D, 0x00, 0x00, 0x74, 0xA5, 0xA8, 0x01, 0xB4, 0x91, 0xA9, 0x01,
	0x00, 0x00, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65,
	0x6E, 0x63, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x47, 0x75,
	0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x47, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x00, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20,
	0x77, 0x69, 0x6C, 0x6C, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x75, 0x6D,
	0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x0A, 0x0A, 0x20, 0x2D,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x31, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x3A, 0x20, 0x31, 0x20,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x73, 0x65, 0x20,
	0x31, 0x20, 0x50, 0x72, 0x65, 0x6D, 0x69, 0x75, 0x6D, 0x20, 0x43, 0x6C,
	0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x3A,
	0x20, 0x33, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65,
	0x64, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x0A, 0x0A, 0x20, 0x2D,
	0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20, 0x31, 0x35, 0x30, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63,
	0x74, 0x20, 0x4E, 0x79, 0x78, 0x20, 0x6F, 0x72, 0x20, 0x53, 0x6B, 0x61,
	0x64, 0x69, 0x0A, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x33, 0x30, 0x30, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20,
	0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x4E, 0x79, 0x78, 0x20, 0x6F,
	0x72, 0x20, 0x53, 0x6B, 0x61, 0x64, 0x69, 0x0A, 0x0A, 0x20, 0x2A, 0x20,
	0x55, 0x70, 0x6F, 0x6E, 0x20, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69,
	0x6E, 0x67, 0x20, 0x61, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x61, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6C, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x20, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x20,
	0x28, 0x50, 0x65, 0x72, 0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x29, 0x2E,
	0x0A, 0x20, 0x2A, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79,
	0x20, 0x62, 0x65, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x65, 0x64, 0x20,
	0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63,
	0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
	0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C,
	0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65,
	0x73, 0x2D, 0x6E, 0x6F, 0x76, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33,
	0x30, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x02, 0x00, 0x54,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
	0x76, 0x74, 0x32, 0x32, 0x31, 0x31, 0x31, 0x37, 0x5F, 0x43, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x00, 0x0E,
	0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00,
	0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74,
	0x00, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x31, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x0A, 0x0A,
	0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20, 0x32, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x50,
	0x54, 0x20, 0x69, 0x6E, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x6D, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x31, 0x30,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x29, 0x0A, 0x20, 0x2D, 0x20,
	0x32, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x2C, 0x20, 0x36, 0x20, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x32,
	0x20, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x49, 0x6E, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x5A, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x4C, 0x61,
	0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x73, 0x3A, 0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73,
	0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x33, 0x30, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29,
	0x0A, 0x20, 0x2D, 0x20, 0x55, 0x70, 0x6F, 0x6E, 0x20, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x78,
	0x31, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x34, 0x20, 0x61, 0x20,
	0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x70, 0x6F, 0x6E,
	0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x30,
	0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x54, 0x72,
	0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20,
	0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x78, 0x33, 0x20, 0x28,
	0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x29, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65,
	0x6D, 0x62, 0x65, 0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x05, 0x00, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0xFB, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F,
	0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F,
	0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x50,
	0x54, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20,
	0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x54, 0x6F, 0x64, 0x61,
	0x79, 0x27, 0x73, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x2F, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72,
	0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x20, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x5F,
	0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x4C, 0x61, 0x62, 0x00
};

void CPacketManager::SendAlarm(IExtendedSocket* socket, const vector<Notice_s>& notices)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Alarm);
	msg->BuildHeader();

	msg->WriteData(rawData, sizeof(rawData));

	/*msg->WriteUInt8(0);

	msg->WriteUInt16(notices.size());
	for (auto notice : notices)
	{
		msg->WriteUInt8(notice.id);
		msg->WriteUInt8(0); // is user has read notice
		msg->WriteUInt8(0);
		msg->WriteUInt32(notice.startDate);
		msg->WriteUInt32(notice.endDate);
		msg->WriteUInt16(0);
		msg->WriteString(notice.name);
		msg->WriteString("url");
		msg->WriteString(notice.description);
		msg->WriteString("desc3");

		if (1)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}

		msg->WriteUInt16(1); // count
		if (1)
		{
			msg->WriteString("kavo4");
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0); // count
			if (0)
			{
				msg->WriteUInt32(0);
				msg->WriteUInt16(0);
				msg->WriteUInt32(0);
				msg->WriteUInt32(0);
				msg->WriteUInt8(0);
			}
		}
		msg->WriteUInt16(0);

		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
	}*/

	socket->Send(msg);
}

unsigned char Questunk1[10419] = {
	0x01, 0x10, 0x24, 0x01, 0xBD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xBE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xBF, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC1, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC2, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC3, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC4,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xC5, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xC6, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xC7, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xC8, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xC9, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xCA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCB, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCC, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCD, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCE, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCF, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD0,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xD1, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xD2, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x09, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xD3, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xD4, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xD5, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x32,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xD6, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD7, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD9, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDA, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDB, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDC,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xDD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xDE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xDF, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xE0, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xE1, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xE2, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE3, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE4, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
	0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE5, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE6, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE7, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE8,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xE9, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xEA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xEB, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xEC, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xED, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xEE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xEF, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF1, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF2, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF3, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF9,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xFA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xFB, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x06, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xFC, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xFD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xD1, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x02, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xD5, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD7, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x07,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0x88,
	0x13, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xD8, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00,
	0x53, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xD9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x04,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00, 0x0B, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xDC, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0C,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xDD, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x0D, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xDE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x0E, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xDF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x0F, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x64, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE0, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x10,
	0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0xC8,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x0D, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0xE6,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,
	0x00, 0x02, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x03,
	0x0D, 0x64, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x07, 0x00, 0x00, 0x23,
	0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x00, 0x03,
	0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x0D,
	0xE8, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x88, 0x13,
	0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE4, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC4,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x02, 0x00, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x01, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00,
	0x0D, 0x64, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x01, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x7E, 0x08, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x07, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x04, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x07, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x07, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0xA1, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x07, 0x00,
	0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x07, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x1C, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xED,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x1D, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xEE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x1E,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xEF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x1F, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xF1, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00,
	0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x22, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xF4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xF7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2A, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFB, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x2B,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xFC, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00,
	0x2C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xFD, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00,
	0x00, 0x2D, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00,
	0x00, 0x00, 0x2E, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x2F, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x31, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xC4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, 0x00, 0x05, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x33, 0x00, 0x05, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x5E, 0x01, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x00, 0x05, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x5E, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x04,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0xCB, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x39, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3A,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x3B, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x3C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x3D, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C,
	0x01, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xB8, 0x0B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02,
	0x00, 0x00, 0x42, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8,
	0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x45, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x0D, 0xF4,
	0x01, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x02, 0x0D, 0x90, 0x01, 0x00,
	0x00, 0x90, 0x01, 0x00, 0x00, 0x03, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0xCD,
	0x00, 0x00, 0x00, 0x04, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00,
	0x00, 0x05, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x06,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00,
	0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x19, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x49,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x16,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x4A, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x4B, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x96, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00,
	0x4C, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x52, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x23, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x15,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x24, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x54, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x55, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x26, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x56, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x27, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x57, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x29, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x61, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x62, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x41, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x35, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x65, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x66, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x67, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00,
	0x0D, 0xC8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x0D, 0xC8, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x04, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x05,
	0x0D, 0xC8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0D, 0xC8, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x09, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x0A, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
	0x00, 0x0B, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6A, 0x00,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6B,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x6C, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00,
	0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00,
	0x00, 0x6D, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x6E, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x6F, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x70, 0x00, 0x06, 0x00, 0x00, 0x06,
	0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x05, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0x00, 0x06,
	0x00, 0x00, 0x06, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x42, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x72, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x06,
	0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x74, 0x00, 0x01, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xA0, 0x86, 0x01, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x75, 0x00, 0x06, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x76, 0x00, 0x06, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x77, 0x00, 0x06,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00,
	0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x50, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x53, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x56, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x86,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xFA,
	0x1C, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x57, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x87, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00,
	0xD1, 0x02, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x58, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x88, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00,
	0x00, 0x23, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x59, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x89, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x8A, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10,
	0x27, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x5A, 0x02, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xF2, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xD0, 0x02, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x91, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x62, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x92,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x63, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x93, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x64, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x94, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x08, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x66, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x97, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x98, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x9A,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x6B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x9B, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x6C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x9C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x6D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x9D, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x9E, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x74, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xA4, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA5, 0x00,
	0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x06, 0x00, 0x00,
	0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xA8, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA9, 0x00,
	0x06, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x7A, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x07, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xAD,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x83, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x84, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB4,
	0x00, 0x06, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x02, 0x00, 0x00, 0xB5, 0x00, 0x07, 0x01, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x02, 0x00, 0x00, 0xB6, 0x00, 0x07, 0x01, 0x00, 0x01, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x88, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xBD, 0x00, 0x07, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xBE, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x8F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xBF, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x07, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC2, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x93, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xC3, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC9, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xCA,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x9B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xCB, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x9C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xCC, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x9D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xCD, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x9E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02,
	0x00, 0x00, 0x00, 0xCE, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xCF, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD1, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD5, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD6, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD7,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xA9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xD9, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xAA, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xDA, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xAB, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xDB, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xAC, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xDC, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xDD, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE2, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE3, 0x00,
	0x06, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xB7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xE7, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xE8, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xB9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xE9, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEA, 0x00,
	0x01, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xBC, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xEC, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xED, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xBE, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xEE, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xBF, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xEF, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xF0, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC1, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xF1, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xF2, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xF3, 0x00, 0x06, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xC4, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xF4, 0x00, 0x07, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC6, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xF6,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xF7, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x06, 0x00, 0x00,
	0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xF9, 0x00, 0x06, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x7E,
	0x00, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01,
	0x7F, 0x00, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x01, 0xB9, 0x0C, 0x9A, 0x01, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x05,
	0x01, 0x00, 0x00
};

void CPacketManager::SendQuestUnk1(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk1, sizeof(Questunk1));

	socket->Send(msg);
}

unsigned char Questunk11[17] = {
	0x0B, 0xF3, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01
};

void CPacketManager::SendQuestUnk11(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk11, sizeof(Questunk11));

	socket->Send(msg);
}

unsigned char Questunk12[11] = {
	0x0C, 0xDE, 0x07, 0x00, 0x00, 0x01, 0x09, 0x64, 0x00, 0x00, 0x00
};

void CPacketManager::SendQuestUnk12(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk12, sizeof(Questunk12));

	socket->Send(msg);
}

unsigned char Questunk13[14] = {
	0x0D, 0xF3, 0x02, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01
};

void CPacketManager::SendQuestUnk13(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk13, sizeof(Questunk13));

	socket->Send(msg);
}

void CPacketManager::SendUpdateInfoNicknameChangeReply(IExtendedSocket* socket, int replyCode)
{
	string msgText;
	CSendPacket* msg = CreatePacket(socket, PacketId::UpdateInfo);
	msg->BuildHeader();

	msg->WriteUInt8(2); // nickname change reply
	switch (replyCode)
	{
	case 1:
		msgText = "";
		replyCode = 2;
		break;
	case -1:
		msgText = "CSO_NICKNAME_TOO_SHORT";
		break;
	case -2:
		msgText = "CSO_NICKNAME_TOO_LONG";
		break;
	case -3:
		msgText = "CSO_NICKNAME_ALREADY_EXIST";
		break;
	case 4:
		msgText = "CSO_NICKNAME_INVALID_NAME_CHAR";
		break;
	case 5:
		msgText = "CSO_NICKNAME_DIGIT_BEFORE_CHAR";
		break;
	case 6:
		msgText = "CSO_NICKNAME_EXCEED_CHAR_COUNT";
		break;
	case 7:
		msgText = "CSO_NICKNAME_PROHIBITED";
		break;
	case 8:
		msgText = "CSO_NEED_NICKNAME_ITEM";
		break;
	};

	msg->WriteUInt8(replyCode);

	msg->WriteString(msgText);

	socket->Send(msg);
}

void CPacketManager::SendTitle(IExtendedSocket* socket, int id)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Title);
	msg->BuildHeader();

	msg->WriteUInt8(0);
	msg->WriteUInt16(id);

	socket->Send(msg);
}

void CPacketManager::SendUDPHostData(IExtendedSocket* socket, bool host, int userID, const string& ipAddress, int port)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Udp);
	msg->BuildHeader();

	msg->WriteUInt8(1);
	msg->WriteUInt8(host);
	msg->WriteUInt32(userID);
	msg->WriteUInt32(ip_string_to_int(ipAddress), false);
	msg->WriteUInt16(port);

	socket->Send(msg);
}

void CPacketManager::SendHostServerStop(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::HostServer);
	msg->BuildHeader();

	msg->WriteUInt8(HostServerPacketType::StopServer);

	socket->Send(msg);
}

void CPacketManager::SendHostServerTransfer(IExtendedSocket* socket, const string& ipAddress, int port)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::HostServer);
	msg->BuildHeader();

	msg->WriteUInt8(HostServerPacketType::TransferServer);
	msg->WriteUInt32(ip_string_to_int(ipAddress), false);
	msg->WriteUInt16(port);

	socket->Send(msg);
}

void BuildClanChronicle(CSendPacket* msg, const vector<ClanChronicle>& chronicle)
{
	msg->WriteUInt32(chronicle.size());
	for (auto& chr : chronicle)
	{
		msg->WriteUInt32(chr.date);
		msg->WriteUInt8(chr.type);
		msg->WriteUInt8(1); // unk
		msg->WriteUInt8(1); // size
		for (int i = 0; i < 1; i++)
		{
			msg->WriteString(chr.str);
		}
	}
}

void BuildClanStorage(CSendPacket* msg, const vector<RewardItem>& items)
{
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(0); // unk
		msg->WriteUInt8(item.itemID != 0);
		if (item.itemID != 0)
		{
			msg->WriteUInt16(item.itemID);
			msg->WriteUInt16(item.count);
			msg->WriteUInt32(item.duration);
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0); // part maybe
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(0);
				msg->WriteUInt16(0);
			}
		}
	}
}

void BuildClanInfo(CSendPacket* msg, const Clan_s& clan)
{
	msg->WriteUInt32(clan.id);
	msg->WriteString(clan.name);
	msg->WriteString(clan.clanMaster);
	msg->WriteUInt64(clan.gameModeID);
	msg->WriteUInt64(clan.mapID);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt8(0);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	//msg->WriteUInt8(clan.time);
	msg->WriteUInt32(clan.memberCount);
	msg->WriteUInt32(clan.maxMemberCount);
	msg->WriteUInt32(0);
	msg->WriteUInt32(0);

	for (int i = 0; i < 2; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt32(0);
	}
	for (int i = 0; i < 2; i++)
	{
		msg->WriteUInt32(0); // achiements?
	}

	BuildClanChronicle(msg, clan.chronicle);

	msg->WriteUInt32(clan.markID);
	msg->WriteUInt8(clan.markChangeCount); // mark change count
	msg->WriteUInt16(clan.expBoost);
	msg->WriteUInt16(clan.pointBoost);
	msg->WriteString(clan.noticeMsg);
	msg->WriteUInt8(0);

	// clan storage last updated items
	BuildClanStorage(msg, clan.lastStorageItems);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
		msg->WriteString("");
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
		msg->WriteUInt32(0);
		msg->WriteUInt32(0);
	}

	msg->WriteUInt32(0);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt16(0);
	msg->WriteUInt32(0);
	msg->WriteUInt16(0);
}


void CPacketManager::SendClanList(IExtendedSocket* socket, const vector<ClanList_s>& clans, int pageID, int pageMax)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanList);
	msg->WriteUInt8(clans.size());
	msg->WriteUInt16(pageID);
	msg->WriteUInt16(pageMax);
	for (auto& clan : clans)
	{
		msg->WriteUInt32(clan.id);
		msg->WriteString(clan.name);
		msg->WriteString(clan.clanMaster);
		msg->WriteUInt32(clan.score);
		msg->WriteUInt32(clan.markID);
		msg->WriteUInt16(clan.gameModeID);
		msg->WriteUInt8(clan.time);
		msg->WriteUInt16(2228);
		msg->WriteUInt32(clan.region);
		msg->WriteUInt16(clan.memberCount);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteString(clan.noticeMsg);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0); // float?
		msg->WriteUInt32(0);
		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanInfo(IExtendedSocket* socket, const Clan_s& clan)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanInfo);
	
	BuildClanInfo(msg, clan);

	socket->Send(msg);
}

void CPacketManager::SendClanReply(IExtendedSocket* socket, int replyID, int replyCode, const char* errStr)
{
	// test reply?
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(replyID);
	msg->WriteUInt8(replyCode); // 0 error 1 approved
	if (!replyCode)
		msg->WriteString(errStr);

	socket->Send(msg);
}

void CPacketManager::SendClanJoinReply(IExtendedSocket* socket, int replyCode, const char* errStr)
{
	// test reply?
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoin);
	msg->WriteUInt8(replyCode);
	if (replyCode == 2 || replyCode == 4)
		msg->WriteString(errStr);
	else
		msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendClanCreateUserList(IExtendedSocket* socket, const vector<ClanUser>& users)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUserList);
	msg->WriteUInt8(0);
	msg->WriteUInt16(users.size());
	for (auto& user : users)
	{
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt32(user.userID);
		msg->WriteUInt8(user.user != NULL);
		msg->WriteUInt32(0); // unk
		msg->WriteUInt8(0); // unk
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateUserList(IExtendedSocket* socket, const ClanUser& user, bool remove)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUserList);
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt32(user.userID);
		msg->WriteUInt8(user.user != NULL);
		msg->WriteUInt32(0); // unk
		msg->WriteUInt8(0); // unk
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStoragePage(IExtendedSocket* socket, const ClanStoragePage& clanStoragePage)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(0); // get storage page

	msg->WriteUInt8(clanStoragePage.pageID);

	BuildClanStorage(msg, clanStoragePage.items);

	socket->Send(msg);
}

void CPacketManager::SendClanStorageHistory(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(1); // get storage history
	msg->WriteUInt16(1);
	for (int i = 0; i < 1; i++)
	{
		msg->WriteUInt32(1);
		msg->WriteString("a");
		msg->WriteUInt8(1);
		msg->WriteUInt16(1);
		msg->WriteUInt16(1);
		msg->WriteUInt16(1);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStorageAccessGrade(IExtendedSocket* socket, const vector<int>& accessGrade)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(3); // access grade

	for (int i = 0; i < (int)accessGrade.size(); i++)
	{
		msg->WriteUInt8(accessGrade[i]);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStorageReply(IExtendedSocket* socket, int replyCode, const char* errStr)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(2); // storage error reply

	msg->WriteUInt8(replyCode); // 0 error 1 approved
	if (!replyCode)
	{
		msg->WriteString(errStr);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanCreateMemberUserList(IExtendedSocket* socket, const vector<ClanUser>& users)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanMemberUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(0);
	msg->WriteUInt16(users.size());
	for (auto& user : users)
	{
		msg->WriteUInt32(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt8(user.memberGrade);
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // human kills
		msg->WriteUInt32(0); // zombie kills
		msg->WriteUInt32(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateMemberUserList(IExtendedSocket* socket, const ClanUser& user, bool remove)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanMemberUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteUInt32(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt8(user.memberGrade);
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // human kills
		msg->WriteUInt32(0); // zombie kills
		msg->WriteUInt32(0);
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanCreateJoinUserList(IExtendedSocket* socket, const vector<ClanUserJoinRequest>& users)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(0);
	msg->WriteUInt8(users.size());
	for (auto& user : users)
	{
		msg->WriteUInt32(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteString(user.inviterGameName);
		msg->WriteUInt32(228); // unk
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // zombie kill
		msg->WriteUInt32(0); // human kill
		msg->WriteUInt32(0); // clan leave count
		msg->WriteUInt32(user.date);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateJoinUserList(IExtendedSocket* socket, const ClanUserJoinRequest& user, bool remove)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteUInt32(user.character.level); // level
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteString(user.inviterGameName);
		msg->WriteUInt32(228); // unk
		msg->WriteUInt32(user.character.kills); // kills
		msg->WriteUInt32(user.character.deaths); // deaths
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // zombie kill
		msg->WriteUInt32(0); // human kill
		msg->WriteUInt32(0); // clan leave count
		msg->WriteUInt32(user.date);
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanDeleteJoinUserList(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);
	msg->WriteUInt8(3);

	socket->Send(msg);
}

void CPacketManager::SendClanUpdate(IExtendedSocket* socket, int type, int memberGrade, const Clan_s& clan)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUpdate);

	msg->WriteUInt8(type);
	switch (type)
	{
	case 0:
		msg->WriteUInt8(memberGrade);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteUInt8(0); // unk

		BuildClanInfo(msg, clan);

		break;
	case 1:
		msg->WriteUInt8(memberGrade);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteUInt8(0); // unk
		msg->WriteUInt32(clan.id);
		msg->WriteString(clan.name);
		msg->WriteString(clan.clanMaster);
		break;
	case 2:
		msg->WriteUInt16(clan.gameModeID);
		msg->WriteUInt16(clan.mapID);
		msg->WriteUInt8(clan.time);
		break;
	case 3:
		msg->WriteUInt32(clan.memberCount);
		msg->WriteUInt32(clan.maxMemberCount);
		break;
	case 4:
		for (int i = 0; i < 2; i++)
		{
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}
		break;
	case 5:
		for (int i = 0; i < 2; i++)
		{
			msg->WriteUInt32(0);
		}
		break;
	case 6:
		BuildClanChronicle(msg, clan.chronicle);
		break;
	case 7:
		msg->WriteUInt32(clan.markID);
		msg->WriteUInt8(clan.markChangeCount); // mark change count
		break;
	case 8:
		msg->WriteUInt16(clan.expBoost);
		msg->WriteUInt16(clan.pointBoost);
		msg->WriteUInt16(22); // unk
		msg->WriteUInt32(33); // unk
		msg->WriteUInt16(44); // unk

		break;
	case 9:
		msg->WriteString(clan.noticeMsg);
		break;
	case 10:
		msg->WriteUInt8(0);
		break;
	case 11:
		BuildClanStorage(msg, clan.lastStorageItems);
		break;
	case 12:
	{
		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteString("");
		}

		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}
		break;
	}
	case 13:
	{
		msg->WriteUInt32(0);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		break;
	}
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateNotice(IExtendedSocket* socket, const Clan_s& clan)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUpdateNoticeMsg);

	msg->WriteString("UNK2");
	msg->WriteString(clan.noticeMsg);
	msg->WriteUInt32(0);

	socket->Send(msg);
}

unsigned char markColor[2250] = {
	0x01, 0x90, 0x00, 0x00, 0x62, 0x05, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x02, 0x00, 0x42, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x0B, 0x02, 0x20, 0x80, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0,
	0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x02, 0x00, 0x80, 0x48,
	0x00, 0x00, 0x00, 0x08, 0x10, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x81, 0x00, 0x02, 0x02, 0x10, 0xC8, 0x40,
	0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x0C, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x80, 0x81, 0x10,
	0x01, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x02,
	0x00, 0x00, 0x00, 0x21, 0x50, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0xA2, 0x04, 0x80, 0x00, 0x00, 0x84, 0x81, 0x40, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
unsigned char markColor2[2250] = {
	0x01, 0x90, 0x00, 0x00, 0x62, 0x05, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x02, 0x00, 0x42, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x0B, 0x02, 0x20, 0x80, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0,
	0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x02, 0x00, 0x80, 0x48,
	0x00, 0x00, 0x00, 0x08, 0x10, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x81, 0x00, 0x02, 0x02, 0x10, 0xC8, 0x40,
	0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x0C, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x80, 0x81, 0x10,
	0x01, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x02,
	0x00, 0x00, 0x00, 0x21, 0x50, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0xA2, 0x04, 0x80, 0x00, 0x00, 0x84, 0x81, 0x40, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void CPacketManager::SendClanMarkColor(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanUpdateMark);

	msg->WriteUInt8(0);
	msg->WriteUInt8(0);

	//msg->WriteUInt16(0x8CA);
	//msg->WriteData(markColor2, sizeof(markColor2));

	msg->WriteUInt16(0x8CA);
	//msg->WriteUInt8(1);
	//msg->WriteUInt8(90);

	for (int i = 0; i < 0x8CA; i++)
	{
		msg->WriteUInt8(0);
	}
	socket->Send(msg);
}

void CPacketManager::SendClanMarkReply(IExtendedSocket* socket, int replyCode, const char* errStr)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanUpdateMark);

	msg->WriteUInt8(0);
	msg->WriteUInt8(1);

	msg->WriteUInt8(replyCode);
	if (!replyCode)
	{
		msg->WriteString(errStr);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanInvite(IExtendedSocket* socket, const string& inviterGameName, int clanID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanInvite);

	msg->WriteString(inviterGameName);
	msg->WriteUInt32(clanID);

	socket->Send(msg);
}

void CPacketManager::SendClanMasterDelegate(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanDelegateMaster);

	msg->WriteUInt8(0);
	msg->WriteString("KAVO SHO ALO");

	socket->Send(msg);
}

void CPacketManager::SendClanKick(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanKicked);

	msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendClanChatMessage(IExtendedSocket* socket, const string& gameName, const string& message)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanChatMessage);
	msg->WriteString(gameName);
	msg->WriteString(message);

	socket->Send(msg);
}

void CPacketManager::SendClanBattleNotice(IExtendedSocket* socket, int type, const string& gameName, int gameModeID, int roomID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanBattleNotice);
	msg->WriteUInt8(type);
	msg->WriteString(gameName);
	msg->WriteUInt8(gameModeID);
	msg->WriteUInt16(roomID);

	socket->Send(msg);
}

void CPacketManager::SendBanList(IExtendedSocket* socket, const vector<string>& banList)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(BanPacketType::BanList);
	msg->WriteUInt16(banList.size());
	for (auto& ban : banList)
	{
		msg->WriteString(ban);
	}
	socket->Send(msg);
}

void CPacketManager::SendBanUpdateList(IExtendedSocket* socket, const string& gameName, bool remove)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(remove ? BanPacketType::BanRemoveNicknameReply : BanPacketType::BanAddNicknameReply);
	msg->WriteString(gameName);
	socket->Send(msg);
}

void CPacketManager::SendBanSettings(IExtendedSocket* socket, int settings)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(BanPacketType::BanSettingsReply);
	msg->WriteUInt8(settings);
	socket->Send(msg);
}

void CPacketManager::SendBanMaxSize(IExtendedSocket* socket, int maxSize)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(BanPacketType::BanListMaxSizeReply);
	msg->WriteUInt16(maxSize);
	socket->Send(msg);
}

void CPacketManager::SendMessengerUserInfo(IExtendedSocket* socket, int userID, const CUserCharacter& character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Messenger);
	msg->BuildHeader();

	msg->WriteUInt8(1); // user info

	msg->WriteUInt32(userID);
	msg->WriteString("22223123132");

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, userID, character);

	socket->Send(msg);
}

void CPacketManager::SendRankReply(IExtendedSocket* socket, int replyCode)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Rank);
	msg->BuildHeader();
	msg->WriteUInt8(RankPacketType::RankReply);
	msg->WriteUInt8(replyCode); // 0 - CSO_Rank_Disable, 1 - CSO_Rank_TimeOut, 2 - CSO_Rank_NotFound, 3 - CSO_Rank_Isquerying, 4 - CSO_Rank_ErrorData, 5 - CSO_Rank_NotPeriod
	socket->Send(msg);
}

void CPacketManager::SendRankUserInfo(IExtendedSocket* socket, int userID, const CUserCharacter& character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Rank);
	msg->BuildHeader();

	msg->WriteUInt8(RankPacketType::RankUserInfo);

	msg->WriteUInt32(userID);
	msg->WriteString(character.gameName);
	msg->WriteUInt32(character.level);
	msg->WriteUInt64(character.exp);
	msg->WriteUInt8(1); // 0 - Don't show location, 1 - Show location
	msg->WriteUInt32(character.nation);
	msg->WriteString(character.regionName); // Region name
	msg->WriteString(character.clanName);
	msg->WriteUInt32(character.clanMarkID);
	msg->WriteUInt32(character.battles);
	msg->WriteUInt32(character.win);
	msg->WriteUInt32(character.kills);
	msg->WriteUInt32(character.deaths);
	msg->WriteString("TEst222"); // match clan
	msg->WriteUInt8(character.leagueID);
	msg->WriteUInt8(character.tier[character.leagueID]); // tier
	msg->WriteUInt8(0); // unk

	socket->Send(msg);
}

void CPacketManager::SendAddonPacket(IExtendedSocket* socket, const vector<int>& addons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Addon);
	msg->BuildHeader();

	msg->WriteUInt16(addons.size());
	for (auto addonID : addons)
	{
		msg->WriteUInt16(addonID);
	}

	socket->Send(msg);
}

void CPacketManager::SendLeaguePacket(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::League);
	msg->BuildHeader();

	msg->WriteUInt8(0);

	msg->WriteUInt8(5);
	for (int i = 0; i < 5; i++)
	{
		msg->WriteUInt8(i); // league id
		msg->WriteUInt8(1); // is league in progress
		msg->WriteUInt16(1); // season number
		msg->WriteUInt8(5); // grade id
		msg->WriteUInt32(0); // unk
	}

	socket->Send(msg);
}

void CPacketManager::SendLeagueGaugePacket(IExtendedSocket* socket, int gameModeId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::League);
	msg->BuildHeader();  

	msg->WriteUInt8(6);

	msg->WriteUInt8(1); // size always 1
	msg->WriteUInt8(gameModeId);
	msg->WriteUInt8(0); // 0 - show league gauge in-game, 1 - don't show league gauge in-game

	socket->Send(msg);
}

void CPacketManager::SendCrypt(IExtendedSocket* socket, int type, unsigned char* key, unsigned char* iv)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Crypt);
	msg->BuildHeader();

	msg->WriteUInt8(type);
	msg->WriteUInt8(2); // crypt method(0,1 - something related to ssl ?, 2 - rc4, 3 - rc40, 4 - none)

	// if TLSv1 used, key is 32 bytes
	msg->WriteData(key, 64);
	msg->WriteData(iv, 64);

	socket->Send(msg);
}

void CPacketManager::SendUpdateInfo(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UpdateInfo);
	msg->BuildHeader();

	msg->WriteUInt8(11);

	socket->Send(msg);
}

void CPacketManager::SendPacketFromFile(IExtendedSocket* socket, const std::string& filename)
{
	FILE* file = fopen(filename.c_str(), "rb");
	if (!file)
		return;

	fseek(file, 0, SEEK_END);
	size_t len = ftell(file);
	rewind(file);

	if (!len || len > PACKET_MAX_SIZE)
		return;

	unsigned char* buf = new unsigned char[len];

	if (fread(buf, 1, len, file) != len)
	{
		delete buf;
		return;
	}

	CSendPacket* msg = CreatePacket(socket, buf[0]);
	msg->BuildHeader();

	msg->WriteData(buf + 1, len - 1);

	socket->Send(msg);

	delete buf;
}

void CPacketManager::SendKickPacket(IExtendedSocket* socket, int userID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Kick);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	msg->WriteUInt32(userID);
	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk4(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(4);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(1);
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk8(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(8);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(1);
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk9(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(9);

	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0); // voxelFlag
		if (0 & VOXELFLAG_ID) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_RESOURCEID) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_RESOURCEMAXPLAYER) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_TITLE) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_RESOURCEMODE) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_PERMISSION) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_DESCRIPTION) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_PARENTSSLOTID) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_IMAGEID) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_CREATORNICKNAME) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_CREATORUSERNAME) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_LIKECOUNT) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_PLAYCOUNT) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_BOOKMARKCOUNT) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_UNK15) {
			msg->WriteUInt32(0);
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt32(0);
				msg->WriteString("");
			}
		}
		if (0 & VOXELFLAG_CUBECOUNT) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_UNK17) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_UNK18) {
			msg->WriteUInt32(0);
		}
		if (0 & VOXELFLAG_SLOTCATEGORY) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_SANDBOXSCRIPT) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_SAVEGROUPID) {
			msg->WriteString("");
		}
		if (0 & VOXELFLAG_UNK22) {
			msg->WriteUInt8(0);
		}
		if (0 & VOXELFLAG_UNK23) {
			msg->WriteUInt8(0);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk10(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(10);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
		msg->WriteString("");
		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelURLs(IExtendedSocket* socket, const std::string& voxelVxlURL, const std::string& voxelVmgURL)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(20);

	msg->WriteString(voxelVxlURL);
	msg->WriteString(voxelVmgURL);

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk38(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(38);

	msg->WriteUInt8(0);
	msg->WriteUInt16(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk46(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(46);

	msg->WriteUInt16(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk47(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(47);

	msg->WriteString("");

	socket->Send(msg);
}

void CPacketManager::SendVoxelUnk58(IExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Voxel);
	msg->BuildHeader();

	msg->WriteUInt8(58);

	msg->WriteUInt8(6);

	socket->Send(msg);
}